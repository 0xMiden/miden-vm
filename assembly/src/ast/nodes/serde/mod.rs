use super::{CodeBody, Felt, Instruction, Node, ProcedureId, RpoDigest, ToString};
use crate::MAX_PUSH_INPUTS;
use num_enum::TryFromPrimitive;
use vm_core::utils::{ByteReader, ByteWriter, Deserializable, DeserializationError, Serializable};

mod debug;
mod deserialization;
mod serialization;

// OPERATION CODES ENUM
// ================================================================================================

#[repr(u8)]
#[derive(Copy, Clone, Debug, PartialEq, Eq, TryFromPrimitive)]
pub enum OpCode {
    Assert = 0,
    AssertWithError = 1,
    AssertEq = 2,
    AssertEqWithError = 3,
    AssertEqw = 4,
    AssertEqwWithError = 5,
    Assertz = 6,
    AssertzWithError = 7,
    Add = 8,
    AddImm = 9,
    Sub = 10,
    SubImm = 11,
    Mul = 12,
    MulImm = 13,
    Div = 14,
    DivImm = 15,
    Neg = 16,
    Inv = 17,
    Incr = 18,
    Pow2 = 19,
    Exp = 20,
    ExpImm = 21,
    ExpBitLength = 22,
    Not = 23,
    And = 24,
    Or = 25,
    Xor = 26,
    Eq = 27,
    EqImm = 28,
    Neq = 29,
    NeqImm = 30,
    Eqw = 31,
    Lt = 32,
    Lte = 33,
    Gt = 34,
    Gte = 35,
    IsOdd = 36,

    // ----- ext2 operations ----------------------------------------------------------------------
    Ext2Add = 37,
    Ext2Sub = 38,
    Ext2Mul = 39,
    Ext2Div = 40,
    Ext2Neg = 41,
    Ext2Inv = 42,

    // ----- u32 manipulation ---------------------------------------------------------------------
    U32Test = 43,
    U32TestW = 44,
    U32Assert = 45,
    U32Assert2 = 46,
    U32AssertW = 47,
    U32Split = 48,
    U32Cast = 49,
    U32CheckedAdd = 50,
    U32CheckedAddImm = 51,
    U32WrappingAdd = 52,
    U32WrappingAddImm = 53,
    U32OverflowingAdd = 54,
    U32OverflowingAddImm = 55,
    U32OverflowingAdd3 = 56,
    U32WrappingAdd3 = 57,
    U32CheckedSub = 58,
    U32CheckedSubImm = 59,
    U32WrappingSub = 60,
    U32WrappingSubImm = 61,
    U32OverflowingSub = 62,
    U32OverflowingSubImm = 63,
    U32CheckedMul = 64,
    U32CheckedMulImm = 65,
    U32WrappingMul = 66,
    U32WrappingMulImm = 67,
    U32OverflowingMul = 68,
    U32OverflowingMulImm = 69,
    U32OverflowingMadd = 70,
    U32WrappingMadd = 71,
    U32CheckedDiv = 72,
    U32CheckedDivImm = 73,
    U32UncheckedDiv = 74,
    U32UncheckedDivImm = 75,
    U32CheckedMod = 76,
    U32CheckedModImm = 77,
    U32UncheckedMod = 78,
    U32UncheckedModImm = 79,
    U32CheckedDivMod = 80,
    U32CheckedDivModImm = 81,
    U32UncheckedDivMod = 82,
    U32UncheckedDivModImm = 83,
    U32CheckedAnd = 84,
    U32CheckedOr = 85,
    U32CheckedXor = 86,
    U32CheckedNot = 87,
    U32CheckedShr = 88,
    U32CheckedShrImm = 89,
    U32UncheckedShr = 90,
    U32UncheckedShrImm = 91,
    U32CheckedShl = 92,
    U32CheckedShlImm = 93,
    U32UncheckedShl = 94,
    U32UncheckedShlImm = 95,
    U32CheckedRotr = 96,
    U32CheckedRotrImm = 97,
    U32UncheckedRotr = 98,
    U32UncheckedRotrImm = 99,
    U32CheckedRotl = 100,
    U32CheckedRotlImm = 101,
    U32UncheckedRotl = 102,
    U32UncheckedRotlImm = 103,
    U32CheckedPopcnt = 104,
    U32UncheckedPopcnt = 105,
    U32CheckedEq = 106,
    U32CheckedEqImm = 107,
    U32CheckedNeq = 108,
    U32CheckedNeqImm = 109,
    U32CheckedLt = 110,
    U32UncheckedLt = 111,
    U32CheckedLte = 112,
    U32UncheckedLte = 113,
    U32CheckedGt = 114,
    U32UncheckedGt = 115,
    U32CheckedGte = 116,
    U32UncheckedGte = 117,
    U32CheckedMin = 118,
    U32UncheckedMin = 119,
    U32CheckedMax = 120,
    U32UncheckedMax = 121,

    // ----- stack manipulation -------------------------------------------------------------------
    Drop = 122,
    DropW = 123,
    PadW = 124,
    Dup0 = 125,
    Dup1 = 126,
    Dup2 = 127,
    Dup3 = 128,
    Dup4 = 129,
    Dup5 = 130,
    Dup6 = 131,
    Dup7 = 132,
    Dup8 = 133,
    Dup9 = 134,
    Dup10 = 135,
    Dup11 = 136,
    Dup12 = 137,
    Dup13 = 138,
    Dup14 = 139,
    Dup15 = 140,
    DupW0 = 141,
    DupW1 = 142,
    DupW2 = 143,
    DupW3 = 144,
    Swap1 = 145,
    Swap2 = 146,
    Swap3 = 147,
    Swap4 = 148,
    Swap5 = 149,
    Swap6 = 150,
    Swap7 = 151,
    Swap8 = 152,
    Swap9 = 153,
    Swap10 = 154,
    Swap11 = 155,
    Swap12 = 156,
    Swap13 = 157,
    Swap14 = 158,
    Swap15 = 159,
    SwapW1 = 160,
    SwapW2 = 161,
    SwapW3 = 162,
    SwapDW = 163,
    MovUp2 = 164,
    MovUp3 = 165,
    MovUp4 = 166,
    MovUp5 = 167,
    MovUp6 = 168,
    MovUp7 = 169,
    MovUp8 = 170,
    MovUp9 = 171,
    MovUp10 = 172,
    MovUp11 = 173,
    MovUp12 = 174,
    MovUp13 = 175,
    MovUp14 = 176,
    MovUp15 = 177,
    MovUpW2 = 178,
    MovUpW3 = 179,
    MovDn2 = 180,
    MovDn3 = 181,
    MovDn4 = 182,
    MovDn5 = 183,
    MovDn6 = 184,
    MovDn7 = 185,
    MovDn8 = 186,
    MovDn9 = 187,
    MovDn10 = 188,
    MovDn11 = 189,
    MovDn12 = 190,
    MovDn13 = 191,
    MovDn14 = 192,
    MovDn15 = 193,
    MovDnW2 = 194,
    MovDnW3 = 195,
    CSwap = 196,
    CSwapW = 197,
    CDrop = 198,
    CDropW = 199,

    // ----- input / output operations ------------------------------------------------------------
    PushU8 = 200,
    PushU16 = 201,
    PushU32 = 202,
    PushFelt = 203,
    PushWord = 204,
    PushU8List = 205,
    PushU16List = 206,
    PushU32List = 207,
    PushFeltList = 208,

    Locaddr = 209,
    Sdepth = 210,
    Caller = 211,
    Clk = 212,

    MemLoad = 213,
    MemLoadImm = 214,
    MemLoadW = 215,
    MemLoadWImm = 216,
    LocLoad = 217,
    LocLoadW = 218,
    MemStore = 219,
    MemStoreImm = 220,
    LocStore = 221,
    MemStoreW = 222,
    MemStoreWImm = 223,
    LocStoreW = 224,

    MemStream = 225,
    AdvPipe = 226,

    AdvPush = 227,
    AdvLoadW = 228,

    AdvInject = 229,

    // ----- cryptographic operations -------------------------------------------------------------
    Hash = 230,
    HMerge = 231,
    HPerm = 232,
    MTreeGet = 233,
    MTreeSet = 234,
    MTreeMerge = 235,
    MTreeVerify = 236,

    // ----- STARK proof verification -------------------------------------------------------------
    FriExt2Fold4 = 237,

    // ----- exec / call --------------------------------------------------------------------------
    ExecLocal = 238,
    ExecImported = 239,
    CallLocal = 240,
    CallMastRoot = 241,
    CallImported = 242,
    SysCall = 243,
    DynExec = 244,

    // ----- debugging ----------------------------------------------------------------------------
    Debug = 245,

    // ----- control flow -------------------------------------------------------------------------
    IfElse = 253,
    Repeat = 254,
    While = 255,
}

impl Serializable for OpCode {
    fn write_into<W: ByteWriter>(&self, target: &mut W) {
        target.write_u8(*self as u8);
    }
}

impl Deserializable for OpCode {
    fn read_from<R: ByteReader>(source: &mut R) -> Result<Self, DeserializationError> {
        let value = source.read_u8()?;
        Self::try_from(value).map_err(|_| {
            DeserializationError::InvalidValue("could not read a valid opcode".to_string())
        })
    }
}
