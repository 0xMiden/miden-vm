# if stack top has [d, c, b, a], after completion of execution of 
  this procedure stack top should look like [a, b, c, d] #
proc.rev_4_elements
    swap
    movup.2
    movup.3
end

# given four elements of from each of a, b sets, following procedure computes a[i] ^ b[i] ∀ i = [0, 3] #
proc.xor_4_elements
    movup.7
    u32xor

    swap

    movup.6
    u32xor

    movup.2
    movup.5
    u32xor

    movup.4
    movup.4
    u32xor
end

# keccak-p[b, n_r] | b = 1600, n_r = 24, permutation's θ function, which is 
  implemented in terms of 32 -bit word size; 
  see https://github.com/itzmeanjan/merklize-sha/blob/1d35aae9da7fed20127489f362b4bc93242a516c/include/sha3.hpp#L55-L98 for original implementation #
export.theta.7
    popw.local.0
    popw.local.1
    popw.local.2
    popw.local.3

    # --- begin https://github.com/itzmeanjan/merklize-sha/blob/1d35aae9da7fed20127489f362b4bc93242a516c/include/sha3.hpp#L71-L79 --- #

    # compute a[0] ^ a[10] ^ a[20] ^ a[30] ^ a[40] #
    loadw.local.0
    swap
    drop
    movup.2
    drop

    pushw.mem
    repeat.3
        swap
        drop
    end

    swap
    pushw.mem
    drop
    drop
    swap
    drop

    u32xor

    pushw.local.1
    drop
    swap
    drop

    pushw.mem
    repeat.3
        swap
        drop
    end

    swap
    pushw.mem
    drop
    drop
    swap
    drop

    u32xor
    u32xor

    pushw.local.2
    drop
    drop
    swap
    drop

    pushw.mem
    repeat.3
        swap
        drop
    end

    u32xor

    # stack = [c_0] #
    # --- #
    # compute a[1] ^ a[11] ^ a[21] ^ a[31] ^ a[41] #

    pushw.local.0
    swap
    drop
    movup.2
    drop

    pushw.mem
    drop
    repeat.2
        swap
        drop
    end

    swap
    pushw.mem
    drop
    drop
    drop

    u32xor

    pushw.local.1
    drop
    swap
    drop

    pushw.mem

    drop
    repeat.2
        swap
        drop
    end

    swap

    pushw.mem
    drop
    drop
    drop

    u32xor
    u32xor

    pushw.local.2
    drop
    drop
    swap
    drop

    pushw.mem

    drop
    repeat.2
        swap
        drop
    end

    u32xor

    # stack = [c_1, c_0] #
    # --- #
    # compute a[2] ^ a[12] ^ a[22] ^ a[32] ^ a[42] #

    pushw.local.0
    repeat.2
        swap
        drop
    end

    pushw.mem
    
    drop
    drop
    swap
    drop

    swap

    pushw.mem

    repeat.3
        swap
        drop
    end

    u32xor

    pushw.local.1

    drop
    repeat.2
        swap
        drop
    end

    pushw.mem

    drop
    drop
    swap
    drop

    u32xor

    pushw.local.2

    swap
    drop
    movup.2
    drop

    pushw.mem

    repeat.3
        swap
        drop
    end

    swap

    pushw.mem

    drop
    drop
    swap
    drop

    u32xor
    u32xor
    
    # stack = [c_2, c_1, c_0] #
    # --- #
    # compute a[3] ^ a[13] ^ a[23] ^ a[33] ^ a[43] #

    pushw.local.0

    repeat.2
        swap
        drop
    end

    pushw.mem

    drop
    drop
    drop

    swap
    
    pushw.mem

    drop
    repeat.2
        swap
        drop
    end

    u32xor

    pushw.local.1

    drop
    repeat.2
        swap
        drop
    end

    pushw.mem

    drop
    drop
    drop

    u32xor

    pushw.local.2

    swap
    drop
    movup.2
    drop

    pushw.mem

    drop
    repeat.2
        swap
        drop
    end

    swap

    pushw.mem

    drop
    drop
    drop

    u32xor
    u32xor

    # stack = [c_3, c_2, c_1, c_0] #
    # --- #
    # compute a[4] ^ a[14] ^ a[24] ^ a[34] ^ a[44] #

    pushw.local.0

    drop
    swap
    drop

    pushw.mem

    repeat.3
        swap
        drop
    end

    swap

    pushw.mem

    drop
    drop
    swap
    drop

    u32xor

    pushw.local.1

    drop
    drop
    swap
    drop

    pushw.mem

    repeat.3
        swap
        drop
    end

    u32xor
    
    pushw.local.2
    
    repeat.2
        swap
        drop
    end

    pushw.mem

    drop
    drop
    swap
    drop

    swap

    pushw.mem

    repeat.3
        swap
        drop
    end

    u32xor
    u32xor

    # stack = [c_4, c_3, c_2, c_1, c_0] #
    # --- #
    # compute a[5] ^ a[15] ^ a[25] ^ a[35] ^ a[45] #

    pushw.local.0

    drop
    swap
    drop

    pushw.mem

    drop
    repeat.2
        swap
        drop
    end

    swap

    pushw.mem

    drop
    drop
    drop

    u32xor

    pushw.local.1

    drop
    drop
    swap
    drop

    pushw.mem

    drop
    repeat.2
        swap
        drop
    end

    u32xor

    pushw.local.2

    repeat.2
        swap
        drop
    end

    pushw.mem

    drop
    drop
    drop

    swap

    pushw.mem

    drop
    repeat.2
        swap
        drop
    end

    u32xor
    u32xor

    # stack = [c_5, c_4, c_3, c_2, c_1, c_0] #
    # --- #
    # compute a[6] ^ a[16] ^ a[26] ^ a[36] ^ a[46] #

    pushw.local.0

    drop
    repeat.2
        swap
        drop
    end

    pushw.mem

    drop
    drop
    swap
    drop

    pushw.local.1

    swap
    drop
    movup.2
    drop

    pushw.mem

    repeat.3
        swap
        drop
    end

    swap

    pushw.mem

    drop
    drop
    swap
    drop

    u32xor
    u32xor

    pushw.local.2

    drop
    swap
    drop

    pushw.mem

    repeat.3
        swap
        drop
    end

    swap

    pushw.mem

    drop
    drop
    swap
    drop

    u32xor
    u32xor

    # stack = [c_6, c_5, c_4, c_3, c_2, c_1, c_0] #
    # --- #
    # compute a[7] ^ a[17] ^ a[27] ^ a[37] ^ a[47] #

    pushw.local.0

    drop
    repeat.2
        swap
        drop
    end

    pushw.mem

    drop
    drop
    drop

    pushw.local.1

    swap
    drop
    movup.2
    drop

    pushw.mem

    drop
    repeat.2
        swap
        drop
    end

    swap
    
    pushw.mem

    drop
    drop
    drop

    u32xor
    u32xor

    pushw.local.2

    drop
    swap
    drop

    pushw.mem

    drop
    repeat.2
        swap
        drop
    end

    swap

    pushw.mem

    drop
    drop
    drop

    u32xor
    u32xor

    # stack = [c_7, c_6, c_5, c_4, c_3, c_2, c_1, c_0] #
    # --- #
    # compute a[8] ^ a[18] ^ a[28] ^ a[38] ^ a[48] #

    pushw.local.0

    drop
    drop
    swap
    drop

    pushw.mem

    repeat.3
        swap
        drop
    end

    pushw.local.1

    repeat.2
        swap
        drop
    end

    pushw.mem

    drop
    drop
    swap
    drop

    swap

    pushw.mem

    repeat.3
        swap
        drop
    end

    u32xor
    u32xor

    pushw.local.2

    drop
    repeat.2
        swap
        drop
    end

    pushw.mem

    drop
    drop
    swap
    drop

    u32xor

    pushw.local.3

    repeat.3
        swap
        drop
    end

    pushw.mem

    repeat.3
        swap
        drop
    end

    u32xor

    # stack = [c_8, c_7, c_6, c_5, c_4, c_3, c_2, c_1, c_0] #
    # --- #
    # compute a[9] ^ a[19] ^ a[29] ^ a[39] ^ a[49] #

    pushw.local.0

    drop
    drop
    swap
    drop

    pushw.mem

    drop
    repeat.2
        swap
        drop
    end

    pushw.local.1

    repeat.2
        swap
        drop
    end

    pushw.mem

    drop
    drop
    drop

    swap

    pushw.mem

    drop
    repeat.2
        swap
        drop
    end

    u32xor
    u32xor

    pushw.local.2

    drop
    repeat.2
        swap
        drop
    end

    pushw.mem

    drop
    drop
    drop

    pushw.local.3

    repeat.3
        swap
        drop
    end

    pushw.mem

    drop
    repeat.2
        swap
        drop
    end

    u32xor
    u32xor

    push.0.0

    # stack = [0, 0, c_9, c_8, c_7, c_6, c_5, c_4, c_3, c_2, c_1, c_0] #

    exec.rev_4_elements
    popw.local.6 # -> to mem [c8, c9, 0, 0] #

    exec.rev_4_elements
    popw.local.5 # -> to mem [c4, c5, c6, c7] #

    exec.rev_4_elements
    popw.local.4 # -> to mem [c0, c1, c2, c3] #

    # --- end https://github.com/itzmeanjan/merklize-sha/blob/1d35aae9da7fed20127489f362b4bc93242a516c/include/sha3.hpp#L71-L79 --- #

    # --- begin https://github.com/itzmeanjan/merklize-sha/blob/1d35aae9da7fed20127489f362b4bc93242a516c/include/sha3.hpp#L81-L91 --- #

    pushw.local.6
    movup.3
    drop
    movup.2
    drop

    pushw.local.4
    drop
    drop

    movup.3
    u32xor

    swap
    movup.2
    swap

    u32rotl.1
    u32xor

    # stack = [d0, d1] #

    pushw.local.4
    movup.3
    drop
    movup.2
    drop

    pushw.local.5
    movup.3
    drop
    movup.2
    drop

    movup.3
    u32xor

    swap
    u32rotl.1
    movup.2
    u32xor

    # stack = [d2, d3, d0, d1] #

    movup.3
    movup.3

    # stack = [d0, d1, d2, d3] #

    pushw.local.4
    drop
    drop

    pushw.local.5
    drop
    drop

    movup.3
    u32xor

    swap
    u32rotl.1
    movup.2
    u32xor

    # stack = [d4, d5, d0, d1, d2, d3] #

    pushw.local.5
    movup.3
    drop
    movup.2
    drop

    pushw.local.6
    movup.3
    drop
    movup.2
    drop

    movup.3
    u32xor

    swap
    u32rotl.1
    movup.2
    u32xor

    # stack = [d6, d7, d4, d5, d0, d1, d2, d3] #

    movup.3
    movup.3

    # stack = [d4, d5, d6, d7, d0, d1, d2, d3] #

    pushw.local.5
    drop
    drop

    pushw.local.4
    movup.3
    drop
    movup.2
    drop

    movup.3
    u32xor

    swap
    u32rotl.1
    movup.2
    u32xor

    # stack = [d8, d9, d4, d5, d6, d7, d0, d1, d2, d3] #

    push.0.0
    movup.3
    movup.3
    
    # stack = [d8, d9, 0, 0, d4, d5, d6, d7, d0, d1, d2, d3] #

    popw.local.6 # -> to mem [d8, d9, 0, 0] #
    popw.local.5 # -> to mem [d4, d5, d6, d7] #
    popw.local.4 # -> to mem [d0, d1, d2, d3] #

    # --- end https://github.com/itzmeanjan/merklize-sha/blob/1d35aae9da7fed20127489f362b4bc93242a516c/include/sha3.hpp#L81-L91 --- #

    pushw.local.0
    dupw

    pushw.mem

    pushw.local.4
    exec.rev_4_elements

    exec.xor_4_elements # compute state[0..4] #

    movup.7
    popw.mem

    pushw.mem

    pushw.local.5
    exec.rev_4_elements

    exec.xor_4_elements # compute state[4..8] #

    movup.6
    popw.mem

    pushw.mem

    pushw.local.6
    exec.rev_4_elements

    drop
    drop

    pushw.local.4
    exec.rev_4_elements

    drop
    drop

    exec.xor_4_elements # compute state[8..12] #

    movup.5
    popw.mem

    pushw.mem

    pushw.local.4
    drop
    drop
    swap

    pushw.local.5
    exec.rev_4_elements

    drop
    drop

    exec.xor_4_elements # compute state[12..16] #

    movup.4
    popw.mem

    pushw.local.1
    dupw

    pushw.mem

    pushw.local.5
    drop
    drop
    swap

    pushw.local.6
    exec.rev_4_elements

    drop
    drop

    exec.xor_4_elements # compute state[16..20] #

    movup.7
    popw.mem

    pushw.mem

    pushw.local.4
    exec.rev_4_elements
    
    exec.xor_4_elements # compute state[20..24] #

    movup.6
    popw.mem

    pushw.mem

    pushw.local.5
    exec.rev_4_elements

    exec.xor_4_elements # compute state[24..28] #

    movup.5
    popw.mem

    pushw.mem

    pushw.local.6
    exec.rev_4_elements

    drop
    drop

    pushw.local.4
    exec.rev_4_elements

    drop
    drop

    exec.xor_4_elements # compute state[28..32] #

    movup.4
    popw.mem

    pushw.local.2
    dupw

    pushw.mem

    pushw.local.4
    drop
    drop
    swap

    pushw.local.5
    exec.rev_4_elements

    drop
    drop

    exec.xor_4_elements # compute state[32..36] #

    movup.7
    popw.mem

    pushw.mem

    pushw.local.5
    drop
    drop
    swap

    pushw.local.6
    exec.rev_4_elements

    drop
    drop

    exec.xor_4_elements # compute state[36..40] #

    movup.6
    popw.mem

    pushw.mem
    
    pushw.local.4
    exec.rev_4_elements

    exec.xor_4_elements # compute state[40..44] #

    movup.5
    popw.mem

    pushw.mem

    pushw.local.5
    exec.rev_4_elements

    exec.xor_4_elements # compute state[44..48] #

    movup.4
    popw.mem

    pushw.local.3

    repeat.3
        swap
        drop
    end

    dup
    pushw.mem

    pushw.local.6
    exec.rev_4_elements

    exec.xor_4_elements # compute state[48..50] #

    movup.4
    popw.mem
end
