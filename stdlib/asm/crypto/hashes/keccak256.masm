use.std::mem
use.std::word
use.std::crypto::hashes::rpo

# ENCODING CONVENTIONS
# ================================================================================================
# 
# This module uses the following notation for data representation:
# - VALUE_U32[n] = arrays of n u32 values, denoted as [v_0, ..., v_{n-1}]
# - VALUE_U8[n] = arrays of n u8 values, denoted as [b_0, ..., b_{n-1}]
# - Conversion: v_i = u32::from_le_bytes([b_{4i}, b_{4i+1}, b_{4i+2}, b_{4i+3}])
# - Fixed-size examples: DIGEST_U32[8] = [d_0, ..., d_7], INPUT_U8[32] = [b_0, ..., b_31]
# - DIGEST_U32[8] = [d_0, ..., d_7] = Keccak256(INPUT_U8[..])

# Constants
# ================================================================================================

const.KECCAK_HASH_MEMORY_EVENT=event("stdlib::hash::keccak256::hash_memory")

# PROCEDURES
# ================================================================================================

#! Computes Keccak256 hash of data stored in memory.
#!
#! Input: [ptr, len_bytes, ...]
#! Output: [DIGEST_U32[8], ...]
#!
#! Where:
#! - ptr: word-aligned memory address containing INPUT_U32[len_u32] where len_u32=⌈len_bytes/4⌉
#! - len_bytes: number of bytes to hash
#! - INPUT_U32[len_u32] ~ INPUT_U8[len_bytes] with u32 packing (unused bytes in final u32 must be 0)
#! - DIGEST_U32[8] = [d_0, ..., d_7] = Keccak256(INPUT_U8[len_bytes])
export.hash_memory
    exec.hash_memory_impl
    # => [COMM, TAG, DIGEST_U32[8], ...]

    # Log the precompile request for deferred verification
    # Requires a placeholder word (PAD) so the top 3 words are [COMM, TAG, PAD]
    padw movdnw.2
    log_precompile
    dropw dropw dropw
    # => [DIGEST_U32[8], ...]
end

#! Computes Keccak256 hash of a single 256-bit input.
#!
#! Input: [INPUT_U32[8], ...]
#! Output: [DIGEST_U32[8], ...]
#!
#! Where
#! - DIGEST_U32[8] = [d_0, ..., d_7] = Keccak256(INPUT_U8[32])
#! - INPUT_U32[8] = [i_0, ..., i_7] = [INPUT_LO, INPUT_HI] ~ INPUT_U8[32] with u32 packing
export.hash_1to1.8
    # Store [INPUT_LO, INPUT_HI] in local memory
    exec.word::reverse loc_storew.0 dropw
    exec.word::reverse loc_storew.4 dropw

    push.32 locaddr.0
    # => [ptr, 32]

    exec.hash_memory
end

#! Merges two 256-bit digests via Keccak256 hash.
#!
#! Input: [INPUT_L_U32[8], INPUT_R_U32[8], ...]
#! Output: [DIGEST_U32[8], ...]
#!
#! Where
#! - INPUT_L_U32[8] = [l_0, ..., l_7] = [INPUT_L_LO, INPUT_L_HI] ~ INPUT_L_U8[32]
#! - INPUT_R_U32[8] = [r_0, ..., r_7] = [INPUT_R_LO, INPUT_R_HI] ~ INPUT_R_U8[32]
#! - DIGEST_U32[8] = [d_0, ..., d_7] = Keccak256(INPUT_L_U8[32] || INPUT_R_U8[32])
export.hash_2to1.16
    # Store [INPUT_L_LO, INPUT_L_HI, INPUT_R_LO, INPUT_R_HI] in local memory
    exec.word::reverse loc_storew.0 dropw
    exec.word::reverse loc_storew.4 dropw
    exec.word::reverse loc_storew.8 dropw
    exec.word::reverse loc_storew.12 dropw
    
    push.64 locaddr.0
    # => [ptr, 64]

    exec.hash_memory
end

# INTERNAL PROCEDURES
# ================================================================================================

#! Internal implementation of memory-based Keccak256 computation via deferred computation.
#!
#! Emits an event to populate the advice stack with digest and store the preimage for deferred verification.
#! Returns the commitment to the precompile call and its tag.
#!
#! Input: [ptr, len_bytes, ...]
#! Output: [COMM, TAG, DIGEST_U32[8], ...]
#!
#! Where:
#! - ptr: word-aligned memory address containing INPUT_U32[len_u32] where len_u32=⌈len_bytes/4⌉
#! - len_bytes: number of bytes to hash
#! - COMM: the calldata commitment `Rpo256(Rpo256(INPUT_U32[..]) || Rpo256(DIGEST_U32[..]))` consumed by `log_precompile`
#! - TAG = [KECCAK_HASH_MEMORY_EVENT, len_bytes, 0, 0] encodes the precompile identifier and the byte length as metadata
#! - DIGEST_U32[8] = [d_0, ..., d_7] = Keccak256(INPUT_U8[len_bytes])
export.hash_memory_impl
    emit.KECCAK_HASH_MEMORY_EVENT
    # => [ptr, len_bytes, ...]

    # Compute len_u32 = ceil(len_bytes / 4)
    dup.1 add.3 u32shr.2 swap
    # => [ptr, len_u32, len_bytes, ...]

    exec.rpo::hash_memory
    # => [COMM_INPUT, len_bytes, ...]

    # Prepare TAG = [0, 0, len_bytes, KECCAK_HASH_MEMORY_EVENT]
    push.KECCAK_HASH_MEMORY_EVENT movup.5 push.0.0 swapw
    # => [COMM_INPUT, TAG, ...]

    # Load digest from advice stack
    adv_push.8
    # => [DIGEST_U32[8], COMM_INPUT, TAG, ...]

    # Compute COMM_DIGEST = Rpo256(DIGEST_U32[8])
    dupw.1 dupw.1 reversedw hmerge
    # => [COMM_DIGEST, DIGEST_U32[8], COMM_INPUT, TAG, ...]

    movupw.3 swapw
    # => [COMM_DIGEST, COMM_INPUT, DIGEST_U32[8], TAG, ...]

    # Compute COMM = Rpo256(COMM_INPUT || COMM_DIGEST)
    hmerge
    # => [COMM, DIGEST_U32[8], TAG, ...]

    # Reorder stack
    movupw.3 swapw
    # => [COMM, TAG, DIGEST_U32[8], ...]
end
