#! Given 4 Miden field elements on stack, representing 32 -bytes input, this routine
#! computes Rescue Prime hash digest, producing 4 field elements, representing 32 -bytes digest.
#!
#! Expected input stack state
#!
#! [a3, a2, a1, a0, ...] s.t. a`i` ∈ F_q | q = 2^64 - 2^32 + 1
#!
#! Output stack state 
#!
#! [b3, b2, b1, b0, ...] s.t. b`i` ∈ F_q | q = 2^64 - 2^32 + 1
#!
#! Applying below linked routine on a slice [a0, a1, a2, a3] should result in digest [b0, b1, b2, b3].
#! Notice difference between input/ output ordering in case of Miden assembly implementation and Rust implementation.
#!
#! See equivalent Rust implementation https://github.com/novifinancial/winterfell/blob/6322724/crypto/src/hash/rescue/rp64_256/mod.rs#L223-L256
export.hash_1to1
    push.4.0.0.0
    swapw
    push.0.0.0.0

    rpperm

    dropw
    swapw
    dropw
end
