use.std::crypto::stark::constants
use.std::crypto::hashes::rpo
use.std::crypto::stark::random_coin

#! Loads the execution trace and the quotient trace evaluation frames.
#! 
#! This also computes Q^z(alpha) and Q^gz(alpha) where:
#!
#! Q^z(alpha) = (q_z_0, q_z_1) = \sum_{i=0}^{n+m+l} S_i * alpha^i
#!
#! and 
#!
#! Q^gz(alpha) = (q_gz_0, q_gz_1) = \sum_{i=0}^{n+m+l} T_i * alpha^i 
#!
#! where:
#!
#! 1. n, m and l are the widths of the main segment, auxiliary segment and constraint composition
#!    traces, respectively.
#! 2. S_i are the evaluations of columns in the main segment, auxiliary segment and constraint composition
#!    at the the out-of-domain point z.
#! 3. T_i are the evaluations of columns in the main segment, auxiliary segment and constraint composition
#!    at the the out-of-domain point gz.
#! 4. alpha is the randomness used in order to build the DEEP polynomial.
export.load_and_horner_eval_ood_frames
    # I) Load the random challenge used in computing the DEEP polynomial.
    #    We use this challenge to compute the constant terms needed in the compuation of the DEEP queries.
    #    Although this challenge is generated only after all the OOD evaluations are received by the verifier,
    #    we use non-determinism to generate it before doing so. This is done so that we can hash, memory store
    #    and Horner evaluate in parallel.
    
    ## 1) Load the random challenge non-deterministically
    adv_push.2
    # => [alpha_1, alpha_0, ...]

    ## 2) Compute the adjustment factors needed in order to adjust the Horner evaluation accumulator
    dup.1 dup.1
    exec.compute_adjustment_powers_deep_challenge_horner_eval
    # => [alpha_1, alpha_0, ...]

    ## 3) Save the random challenge
    dup.1 dup.1
    exec.constants::deep_rand_alpha_ptr mem_storew
    # [Y, ...]

    # II) Compute Q^z(alpha)
    #     Note that there a few a goals which are in tension. Namely, we want to hash the execution trace OOD evaluations,
    #     both current and next, in one go but we want to use Horner evaluation to compute an expression which has a part in
    #     the execution trace OOD evaluations and another part in the quotient trace OOD evaluations.
    #     This complicates things in some places, in particular we need to save the capacity portions temporarily
    #     while hashing the OOD evaluations of both the execution trace and constraint composition polynomials evaluations.

    ## 1) Set up the stack for `horner_eval_ext` to compute Q^z(alpha)

    ### a) Set up the initial accumulator and the pointers to alpha and a pointer to some memory region
    ###    to which we save the OOD.
    push.0.0
    exec.constants::deep_rand_alpha_ptr
    exec.constants::ood_trace_current_ptr

    ## 2) Process the fully aligned OOD `current` evaluations at z of the execution trace. 
    ##    Since there are (80 + 8 + 8) * 2 = 24 * 8 base field elements, there are 24 fully double-word aligned batches.
    ## Note: the first word is the capacity, where its first element is initialized with the number of elements to hash MODULO 8.

    ### a) Set up the hasher state
    padw
    padw     
    # => [ZERO, 0, 0, 0, 0, U, Y, ...]
    movupw.3
    # => [Y, ZERO, 0, 0, 0, 0, U, ...]

    ### b) Process the first 11 8-element batches i.e., the `current` trace OOD evaluations
    repeat.22
        adv_pipe
        horner_eval_ext
        hperm
    end

    ### c) Save the capacity in order to continue hashing
    swapw.2
    exec.constants::tmp1 mem_storew

    ### d) Initialize the capacity portion to hash the constraints polynomials OOD evaluations
    exec.constants::zero_word_ptr mem_loadw
    swapw.2

    ### e) Process the `current` OOD evaluations of the constraint polynomial 
    repeat.2
        adv_pipe
        horner_eval_ext
        hperm
    end

    ### f) Save capacity for hashing constraints OOD and load the capacity for hashing the trace OOD
    swapw.2
    exec.constants::tmp2 mem_storew
    exec.constants::tmp1 mem_loadw
    swapw.2
    # => [Y, Y, C, ood_frame_ptr, alpha_ptr, acc1, acc0, ...]

    # Save -Q^z(alpha)
    swapw.3
    # => [ood_frame_ptr, alpha_ptr, acc1, acc0, Y, C, Y, ...]
    movup.3
    neg
    movup.3
    neg
    push.0.0
    exec.constants::ood_horner_evaluations_ptr mem_storew
    # => [0, 0, -acc1, -acc0, ood_frame_ptr, alpha_ptr, Y, C, Y, ...]

    # II) Compute Q^gz(alpha)

    ## 1) Reset the Horner accumulator
    movdn.5
    movdn.5
    drop drop
    # => [ood_frame_ptr, alpha_ptr, 0, 0, Y, C, Y, ...]

    ## 2) Load the `next` trace polynomials OOD evaluations. 
    ##    Note that the capacity portion of the sponge state is the one resulting from hashing
    ##    the `current` trace polynomials OOD evaluations.
    swapw.3
    # => [Y, Y, C, ood_frame_ptr, alpha_ptr, 0, 0, ...]
    repeat.22
        adv_pipe
        horner_eval_ext
        hperm
    end
    # => [Y, D, C, ood_frame_ptr, alpha_ptr, acc1, acc0, ...]

    ## 3) Reseed with hash of the trace OODs
    swapw
    exec.random_coin::reseed
    # => [Y, C, ood_frame_ptr, alpha_ptr, acc1, acc0, ...]

    ## 4) Load the `next` constraints composition polynomials OOD evaluations. 
    
    ### a) Load the capacity that was used to hash the `current` part and set up the stack
    exec.constants::tmp2 mem_loadw
    swapw
    padw
    # => [Y, Y, C, ood_frame_ptr, alpha_ptr, acc1, acc0, ...]

    ### b) Process the `next` OOD evaluations of the constraints composition polynomials
    repeat.2
        adv_pipe
        horner_eval_ext
        hperm
    end
    # => [Y, D, C, ood_frame_ptr, alpha_ptr, acc1, acc0, ...]

    ### c) Reseed with the digest of the constraints composition polynomials OOD evaluations
    swapw
    exec.random_coin::reseed
    # => [Y, C, ood_frame_ptr, alpha_ptr, acc1, acc0, ...]

    ### d) Negate Q^z(alpha) and save it
    dropw dropw drop drop
    # => [acc1, acc0, ...]
    neg
    exec.constants::ood_horner_evaluations_ptr add.3 mem_store
    # => [acc0, ...]
    neg
    exec.constants::ood_horner_evaluations_ptr add.2 mem_store
    # => [...]
end

#! Computes the adjustment factors needed during Horner evaluation and saves them to memory.
#!
#! As `horner_eval_base` and `horner_eval_ext` operate on batches of 8 and 4 coefficients,
#! respectively, and when the number of coefficients of the polynomial we are evaluating
#! is not divisible by the size of the batch, we need to adjust the result to account
#! for this. The adjustment is performed by multiplying the Horner accumulator by
#! alpha^i where i depends on the number of coefficients missing in the last processed batch.
#! For example, if we are evaluating using `horner_eval_base`, and the last batch of coefficients
#! has only 7 coefficients, we would need then to multiply by alpha^1 to adjust the result.
#! Note that since we are evaluating throughout at alpha^{-1}, the adjustment factors are
#! alpha^i, if on the other hand we were evaluating at alpha then the factors would be alpha^{-i}.
#!
#! Input: [alpha_1, alpha_0, ...]
#! Output: [...]  
#!
#! Cycles: 146
proc.compute_adjustment_powers_deep_challenge_horner_eval

    # 1) First compute powers from 1 to 7
    
    ## a) First power
    ext2inv
    dup.1 dup.1
    exec.constants::deep_rand_alpha_inv_1_ptr
    mem_storew
    # => [alpha_1, alpha_0, alpha_1, alpha_0, ...]

    ## b) Second power
    dup.1 dup.1
    ext2mul
    dup.1 dup.1
    exec.constants::deep_rand_alpha_inv_2_ptr
    mem_storew
    drop drop
    # => [alpha2_1, alpha2_0, alpha_1, alpha_0, ...]

    ## c) Third power
    dup.3 dup.3
    ext2mul
    dup.1 dup.1
    exec.constants::deep_rand_alpha_inv_3_ptr
    mem_storew
    drop drop
    # => [alpha3_1, alpha3_0, alpha_1, alpha_0, ...]

    ## d) Fourth power
    dup.3 dup.3
    ext2mul
    dup.1 dup.1
    exec.constants::deep_rand_alpha_inv_4_ptr
    mem_storew
    drop drop
    # => [alpha4_1, alpha4_0, alpha_1, alpha_0, ...]

    ## e) Fifth power
    dup.3 dup.3
    ext2mul
    dup.1 dup.1
    exec.constants::deep_rand_alpha_inv_5_ptr
    mem_storew
    drop drop
    # => [alpha5_1, alpha5_0, alpha_1, alpha_0, ...]

    ## f) Sixth power
    dup.3 dup.3
    ext2mul
    dup.1 dup.1
    exec.constants::deep_rand_alpha_inv_6_ptr
    mem_storew
    drop drop
    # => [alpha6_1, alpha6_0, alpha_1, alpha_0, ...]

    ## g) Seventh power
    dup.3 dup.3
    ext2mul
    dup.1 dup.1
    exec.constants::deep_rand_alpha_inv_7_ptr
    mem_storew
    drop drop
    # => [alpha7_1, alpha7_0, alpha_1, alpha_0, ...]

    # 2) Clean up the stack
    dropw
    # => [...]
end