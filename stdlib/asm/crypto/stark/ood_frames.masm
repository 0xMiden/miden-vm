use.std::crypto::stark::constants
use.std::crypto::hashes::rpo


#! Loads OOD evaluation frame, with current and next rows interleaved, into memory. This ouputs
#! the hash of the OOD for reseeding the random coin.
#!
#! Input: [...]
#! Output: [OOD_FRAME_HASH, ...]
#! Cycles: 100
export.load_evaluation_frame
    # We have 71 main trace columns and 7 aux trace columns for a total of 156 base field elements
    # per row. Since we have two rows, i.e. current and next, the total number of field elements
    # making up the OOD evaluation frame is 156*2 = 312. We will be reading felts in 39 batches of 8 
    # using `adv_pipe`: 312 = 39 * 8. 
    # The elements are stored from the stack as (a1_1, a1_0, a0_1, a0_0) where a0 is from the
    # current row and a1 from the next row.

    exec.constants::ood_trace_ptr
    #=> [ood_trace_ptr ]

    # Note: the first word is the capacity, where its first element is initialized with the number of elements to hash MODULO 8.
    push.0.0.0.0
    padw padw
    # => [ZERO, ZERO, 0, 0, 0, 0, ood_trace_ptr]
    repeat.39
        adv_pipe
        hperm
    end
    #=> [R1, R2, C, ood_trace_ptr+312]

    dropw
    swapw
    dropw
    movup.4
    drop
    #=> [R2]
end

#! Loads OOD constraint composition polynomial evaluation columns into memory and reseeds the random
#! coin.
#!
#! Input: [...]
#! Output: [EVAL_HASH, ...]
#! Cycles: 29
export.load_constraint_evaluations
    # Read OOD constraint evaluations. These are 8 ExtFelt `value_i` such that the value of the
    # constraint evaluation polynomial at `z` `H(z)` equals `\sum_0^7 z^(N * i) value_i` where N
    # is the execution trace length.

    exec.constants::ood_constraint_evals_ptr
    padw
    padw padw
    repeat.2
        adv_pipe
        hperm
    end

    dropw swapw dropw
    movup.4 drop
end

#! Computes the H(z) evaluation of the constraint composition polynomial at the OOD element z.
#!
#! Input: [...]
#! Output: [res1, res0, ...]
#! Cycles: 83
export.compute_Hz
    # Load z^N, where N is the trace length, and save it for horner_eval_ext
    padw
    exec.constants::z_ptr mem_loadw
    movup.2 drop
    movup.2 drop
    # => [zN_1, zN_0, ...]
    dup.1 dup.1
    ext2inv
    push.0.0
    exec.constants::tmp1 mem_storew
    # => [0, 0, zNinv_1, zNinv_0, zN_1, zN_0, ...]

    # Push the accumulator to hold the evaluation of horner_eval_ext
    push.0.0
    # => [0, 0, 0, 0, zNinv_1, zNinv_0, zN_1, zN_0, ...]

    # Push pointers to the evaluation point and the coefficients i.e., OOD constraint polynomials
    # evaluations
    exec.constants::tmp1
    exec.constants::ood_constraint_evals_ptr
    # => [ood_ptr, zNinv_ptr, 0, 0, 0, 0, zNinv_1, zNinv_0, zN_1, zN_0, ...]

    # Prepare stack for mem_stream
    swapw padw padw
    # => [ZERO, ZERO, 0, 0, zNinv_1, zNinv_0, ood_ptr, zNinv_ptr, 0, 0, zN_1, zN_0, ...]

    # Compute `H_rev(zN^(-1))` where H_rev is the polynomial with coefficients in reverse order
    repeat.2
        mem_stream
        horner_eval_ext
    end
    # => [Y, Y, 0, 0, zNinv_1, zNinv_0, ood_ptr, zNinv_ptr, acc1, acc0, zN_1, zN_0, ...]

    # Clean up the stack
    dropw dropw drop drop
    # => [zNinv_1, zNinv_0, ood_ptr, zNinv_ptr, acc1, acc0, zN_1, zN_0, ...]
    swapw movup.3 movup.3
    # => [zN_1, zN_0, acc1, acc0, zNinv_1, zNinv_0, ood_ptr, zNinv_ptr, ...]

    # Compute zN^8
    repeat.3
        dup.1 dup.1
        ext2mul
    end
    # => [zN^8_1, zN^8_0, acc1, acc0, zNinv_1, zNinv_0, ood_ptr, zNinv_ptr, ...]

    # Compute zN^8 * H_rev(zN^(-1)) * zN^(-1) i.e, zN^7 * H_rev(zN^(-1)) which equals H(zN)
    ext2mul ext2mul
    # => [res_1, res_0, ood_ptr, zNinv_ptr, ...]

    movup.2 drop
    movup.2 drop
    # => [res_1, res_0, ...]
end
