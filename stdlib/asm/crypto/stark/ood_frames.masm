use.std::crypto::stark::constants
use.std::crypto::hashes::rpo


#! Loads OOD evaluation frame, with current and next rows interleaved, into memory. This ouputs
#! the hash of the OOD for reseeding the random coin.
#!
#! Input: [...]
#! Output: [OOD_FRAME_HASH, ...]
#! Cycles: 100
export.load_evaluation_frame
    # We have 71 main trace columns and 7 aux trace columns for a total of 156 base field elements
    # per row. Since we have two rows, i.e. current and next, the total number of field elements
    # making up the OOD evaluation frame is 156*2 = 312. We will be reading felts in 39 batches of 8 
    # using `adv_pipe`: 312 = 39 * 8. 
    # The elements are stored from the stack as (a1_1, a1_0, a0_1, a0_0) where a0 is from the
    # current row and a1 from the next row.

    exec.constants::ood_trace_ptr
    #=> [ood_trace_ptr ]

    # Note: the first word is the capacity, where its first element is initialized with the number of elements to hash MODULO 8.
    push.0.0.0.0
    padw padw
    # => [ZERO, ZERO, 0, 0, 0, 0, ood_trace_ptr]
    repeat.39
        adv_pipe
        hperm
    end
    #=> [R1, R2, C, ood_trace_ptr+312]

    dropw
    swapw
    dropw
    movup.4
    drop
    #=> [R2]
end

#! Loads OOD constraint composition polynomial evaluation columns into memory and reseeds the random
#! coin.
#!
#! Input: [...]
#! Output: [EVAL_HASH, ...]
#! Cycles: 29
export.load_constraint_evaluations
    # Read OOD constraint evaluations. These are 8 ExtFelt `value_i` such that the value of the
    # constraint evaluation polynomial at `z` `H(z)` equals `\sum_0^7 z^(N * i) value_i` where N
    # is the execution trace length.

    exec.constants::ood_constraint_evals_ptr
    padw
    padw padw
    repeat.2
        adv_pipe
        hperm
    end

    dropw swapw dropw
    movup.4 drop
end

#! Computes the H(z) evaluation of the constraint composition polynomial at the OOD element z.
#!
#! Input: [...]
#! Output: [res1, res0, ...]
#! Cycles: 152
#!
#! TODO(Al): Use horner_eval_ext
export.compute_Hz
    # Load the pointer to the OOD constraint polynomials evaluations
    exec.constants::ood_constraint_evals_ptr
    # => [ptr, ...]

    # Compute `H(z)`
    ## Load `value_i`'s

    # Load value_0
    padw dup.4 mem_loadw
    # => [0, 0, v0_1, v0_0, ptr, ...]
   
    # Load value_1
    push.0.0 dup.6 add.4 mem_loadw
    # => [0, 0, v1_1, v1_0, v0_1, v0_0, ptr, ...]

    # Load value_2
    push.0.0 dup.8 add.8 mem_loadw
    # => [0, 0, v2_1, v2_0, v1_1, v1_0, v0_1, v0_0, ptr, ...]

    # Load value_3
    push.0.0 dup.10 add.12 mem_loadw
    # => [0, 0, v3_1, v3_0, v2_1, v2_0, v1_1, v1_0, v0_1, v0_0, ptr, ...]

    # Load value_4
    push.0.0 dup.12 add.16 mem_loadw
    # => [0, 0, v4_1, v4_0, v3_1, v3_0, v2_1, v2_0, v1_1, v1_0, v0_1, v0_0, ptr, ...]

    # Load value_5
    push.0.0 movup.14 movdn.4 dup.4 add.20 mem_loadw
    # => [0, 0, v5_1, v5_0, ptr, v4_1, v4_0, v3_1, v3_0, v2_1, v2_0, v1_1, v1_0, v0_1, v0_0, ptr, ...]

    # Load value_6
    push.0.0 dup.6 add.24 mem_loadw
    # => [0, 0, v6_1, v6_0, v5_1, v5_0, ptr, v4_1, v4_0, v3_1, v3_0, v2_1, v2_0, v1_1, v1_0, v0_1, v0_0, ptr, ...]

    # Load value_7
    push.0.0 movup.8 add.28 mem_loadw
    # => [0, 0, v7_1, v7_0, v6_1, v6_0, v5_1, v5_0, ptr, v4_1, v4_0, v3_1, v3_0, v2_1, v2_0, v1_1, v1_0, v0_1, v0_0, ptr, ...]

    ## Load z^N where N is the length of the execution trace
    push.0.0
    exec.constants::z_ptr mem_loadw
    # => [(z1, z0)^N, z1, z0, v7_1, v7_0, v6_1, v6_0, v5_1, v5_0, ptr, v4_1, v4_0, v3_1, v3_0, v2_1, v2_0, v1_1, v1_0, v0_1, v0_0, ptr, ...]

    movup.2 drop
    movup.2 drop
    # => [z1, z0, value_7, ... ,value_0]

    # Horner evaluation
    # TODO: maybe can be done faster in another way
    repeat.6
        dup
        movdn.6
        dup.1
        movdn.7
        # => [z1, z0, value_7, value_6, z1, z0, value_5, ... ,value_0]

        ext2mul
        ext2add
        # => [acc1, acc0, z1, z0, value_5, ... ,value_0]

        movup.3
        movup.3
        # => [z1, z0, acc1, acc0, value_5, ... ,value_0]
    end
    ext2mul
    ext2add
end
