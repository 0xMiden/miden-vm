use.std::crypto::stark::constants
use.std::crypto::hashes::rpo
use.std::crypto::stark::random_coin


#! Processes the public inputs.
#! 
#! This involves:
#!
#! 1. Loading from the advice stack the fixed-length public inputs and storing them in memory
#! starting from the address pointed to by `public_inputs_address_ptr`.
#! 2. Loading from the advice stack the variable-length public inputs, storing them temporarily
#! in memory, and then reducing them to an element in the challenge field using the auxiliary
#! randomness. This reduced value is then used to impose a boundary condition on the relevant
#! auxiliary column. 
#!
#! Note that the public inputs are stored as extension field elements.
#! Note also that, while loading the above, we compute the hash of the public inputs. The hashing
#! starts with capacity registers of the hash function set to `C` that is the result of hashing
#! the proof context.
#!
#! The output D, that is the digest of the above hashing, is then used in order to reseed
#! the random coin.
#!
#! It is worth noting that:
#!
#! 1. Only the fixed-length public inputs are stored for the lifetime of the verification procedure.
#!    The variable-length public inputs are stored temporarily, as this simplifies the task of
#!    reducing them using the auxiliary randomness. On the other hand, the resulting values from
#!    the aforementioned reductions are stored right after the fixed-length public inputs. These
#!    are stored in word-aligned manner and padded with zeros if needed.
#! 2. The public inputs address is computed in such a way so as we end up with the following
#!    memory layout:
#!
#!    [..., a_0...a_{m-1}, b_0...b_{n-1}, alpha0, alpha1, beta0, beta1, OOD-evaluations-start, ...]
#!
#!    where:
#!
#!    1. [a_0...a_{m-1}] are the fixed-length public inputs stored as extension field elements. This
#!       section is word-aligned.
#!    2. [b_0...b_{n-1}] are the results of reducing the variable length public inputs using
#!       auxiliary randomness. This section is word-aligned.
#!    3. [alpha0, alpha1, beta0, beta1] is the auxiliary randomness.
#!    4. `OOD-evaluations-start` is the first field element of the section containing the OOD
#!       evaluations.
#!
#!
#! Input: [C, ...]
#! Output: [...]
export.process_public_inputs
    # 1) Compute the address where the public inputs will be stored and stores it.
    #    This also computes the address where the reduced variable-length public inputs will be stored.
    exec.compute_and_store_public_inputs_address
    # => [C, ...]

    # 2) Load the public inputs.
    #    This will also hash them so that we can absorb them in the transcript.
    exec.load
    # => [D, ...]

    # 3) Absorb into the transcript
    exec.random_coin::reseed
    # => [...]

    # 4) Reduce the variable-length public inputs using randomness.
    exec.reduce_variable_length_public_inputs
end


#! Loads from the advice stack the public inputs and stores them in memory starting from address
#! pointed to by `public_inputs_address_ptr`.
#! Note that the public inputs are stored as extension field elements.
#! In parallel, it computes the hash of the public inputs being loaded. The hashing starts with
#! capacity registers of the hash function set to `C` resulting from hashing the proof context.
#! The output D is the digest of the hashing of the public inputs.
#!
#! Input: [C, ...]
#! Output: [D, ...]
export.load
    # Load the public inputs from the advice provider.
    # The public inputs are made up of:
    # 
    # 1. the input operand stack and the output operand stack both of length 16 field elements,
    # 2. the digest of the program,
    # 3. the digests of procedures making up the kernel.
    #
    # While loading the public inputs, we also absorb them in the Fiat-Shamir transcript.

    # 1) Load the input and output operand stacks
    exec.constants::public_inputs_address_ptr mem_load
    movdn.4
    padw padw
    repeat.4
        exec.load_base_store_extension_double_word
        hperm
    end
    # => [R2, R1, C, ptr, ...]
     
    # 2) Compute the number of digests we have to load. The digests are the program hash
    #    and kernel procedures digests.
    exec.constants::get_num_kernel_procedures
    add.1

    # 3) Load the program hash and kernel procedures digests.
    #    Note that while we are saving the kernel procedures to memory, this is only done so that
    #    we can later reduce the kernel procedures digests using randomness.
    #    The memory region that will (temporarily) hold these digests will be later on over-written.
    #    We need one call to the RPO permutation per 2 digests, thus we compute the division
    #    with remainder of the number of digests by 2. If the remainder is 1 then we need
    #    to pad with the zero word, while we do not need to pad otherwise.
    u32divmod.2
    push.0 eq
    # => [?, num_iter, R2, R1, C, ptr, ...]
    if.true
        dup
        movdn.14
        push.0
        neq
        # => [(num_iter == 0), R2, R1, C, ptr, num_iter, ...]
        while.true
            exec.load_base_store_extension_double_word
            hperm
            movup.13
            sub.1
            movdn.13
            dup.13
            push.0
            neq
            # => [(num_iter - 1 == 0), R2, R1, C, ptr, num_iter, ...]
        end

    else
        dup
        movdn.14
        push.0
        neq
        # => [(num_iter == 0), R2, R1, C, ptr, num_iter, ...]
        while.true
            exec.load_base_store_extension_double_word
            hperm
            movup.13
            sub.1
            movdn.13
            dup.13
            push.0
            neq
            # => [(num_iter - 1 == 0), R2, R1, C, ptr, num_iter, ...]
        end

        # Absorb the last digest and pad with zeros
        exec.load_base_store_extension_word
        hperm
    end

    exec.rpo::squeeze_digest
    movup.4 drop
    movup.4 drop
end

#! Reduces the variable-length public inputs using the auxiliary randomness.
#!
#! The procedure non-deterministically loads the auxiliary randomness from the advice tape and
#! stores it at `aux_rand_nd_ptr` so that it can be later checked for correctness. After this,
#! the procedure uses the auxiliary randomness in order to reduce the variable-length public
#! inputs to a single element in the challenge field. The resulting values are then stored
#! contiguously after the fixed-length public inputs.
#!
#! Currently, the only variable-length public inputs are the kernel procedure digests.
proc.reduce_variable_length_public_inputs
    # 1) Load the auxiliary randomness i.e., alpha and beta
    #    We store them as [beta0, beta1, alpha0, alpha1] since `horner_eval_ext` requires memory
    #    word-alignment.
    adv_push.4
    exec.constants::aux_rand_nd_ptr mem_storew
    # => [alpha1, alpha0, beta1, beta0, ...]
    dropw
    # => [...]

    # 2) Get the pointer to the variable-length public inputs.
    #    This is also the pointer to the first address at which we will store the results of
    #    the reductions.
    exec.constants::variable_length_public_inputs_address_ptr mem_load
    dup
    # => [next_var_len_pub_inputs_ptr, var_len_pub_inputs_res_ptr, ...] where
    # `next_var_len_pub_inputs_ptr` points to the next chunk of variable public inputs to be reduced,
    # and `var_len_pub_inputs_res_ptr` points to the next available memory location where the result
    # of the reduction can be stored.
    # Note that, as mentioned in the top of this module, the variable-length public inputs are only
    # stored temporarily and they will be over-written by, among other data, the result of reducing
    # the variable public inputs. 

    # 3) Reduce the variable-length public inputs.
    #    These include:
    #    a) Kernel procedure digests.
    exec.reduce_kernel_digests
    # => [res1, res0, next_var_len_pub_inputs_ptr, var_len_pub_inputs_res_ptr, ...]

    # 4) Store the results of the reductions.
    #    This is stored in a word-aligned manner with zero padding if needed.
    push.0.0
    # => [0, 0, res1, res0, next_var_len_pub_inputs_ptr, var_len_pub_inputs_res_ptr, ...]
    dup.5 add.4 swap.6
    mem_storew
    dropw
    # => [next_var_len_pub_inputs_ptr, var_len_pub_inputs_res_ptr, ...]
    
    # 5) Clean up the stack.
    drop drop
    # => [...]
end

#! Reduces the kernel procedures digests using auxiliary randomness.
#!
#! Input: [digests_ptr, ...]
#! Output: [res1, res0, next_ptr, ...]
#!
#! where:
#!  1. `digests_ptr` is a pointer to the kernel procedures digests, and
#!  2. `res = (res0, res1)` is the resulting reduced value.
proc.reduce_kernel_digests
    # Load alpha
    padw exec.constants::aux_rand_nd_ptr mem_loadw
    # => [alpha1, alpha0, beta1, beta0, digests_ptr, ...]

    # We will keep [alpha0, alpha1, prod_acc0, prod_acc1] on the stack so that we can compute the final result
    movup.2 drop
    movup.2 drop
    push.1
    push.0
    # => [prod_acc1, prod_acc0, alpha1, alpha0, digests_ptr, ...]

    # Push the `horner_eval_ext` accumulator
    push.0.0
    # => [acc1, acc0, prod_acc1, prod_acc0, alpha1, alpha0, digests_ptr, ...]

    # Push the pointer to the evaluation point beta
    exec.constants::aux_rand_nd_ptr
    # => [beta_ptr, acc1, acc0, prod_acc1, prod_acc0, alpha1, alpha0, digests_ptr, ...]

    # Get the pointer to kernel procedures digests
    movup.7
    # => [digests_ptr, beta_ptr, acc1, acc0, prod_acc1, prod_acc0, alpha1, alpha0, ...]

    # Set up the stack for `mem_stream` + `horner_eval_ext`
    swapw
    padw push.0.0.0
    # => [0, 0, 0, Y, prod_acc1, prod_acc0, alpha1, alpha0, digests_ptr, beta_ptr, acc1, acc0, ...]
    # where `Y` is a garbage word.

    exec.constants::get_num_kernel_procedures

    exec.constants::tmp1 mem_storew
    dup
    push.0
    neq

    while.true

        mem_stream
        horner_eval_ext
        # => [Y, Y, prod_acc1, prod_acc0, alpha1, alpha0, digests_ptr, beta_ptr, acc1, acc0, ...]

        swapdw
        # => [prod_acc1, prod_acc0, alpha1, alpha0, digests_ptr, beta_ptr, acc1, acc0, Y, Y, ...]

        movup.7 dup.4 add
        # => [alpha0 + acc0, prod_acc1, prod_acc0, alpha1, alpha0, digests_ptr, beta_ptr, acc1, Y, Y, ...]
        
        movup.7 dup.4 add
        # => [alpha1 + acc1, alpha0 + acc0, prod_acc1, prod_acc0, alpha1, alpha0, digests_ptr, beta_ptr, Y, Y, ...]

        ext2mul
        # => [prod_acc1', prod_acc0', alpha1, alpha0, digests_ptr, beta_ptr, Y, Y, ...]

        push.0 movdn.6
        push.0 movdn.6
        # => [prod_acc1', prod_acc0', alpha1, alpha0, digests_ptr, beta_ptr, 0, 0, Y, Y, ...]

        swapdw
        # => [Y, Y, prod_acc1', prod_acc0', alpha1, alpha0, digests_ptr, beta_ptr, 0, 0, ...]

        exec.constants::tmp1 mem_loadw sub.1
        exec.constants::tmp1 mem_storew

        dup
        push.0
        neq
    end
    # => [Y, Y, prod_acc1, prod_acc0, alpha1, alpha0, digests_ptr, beta_ptr, acc1, acc0, ...]
    dropw dropw
    swapw
    # => [digests_ptr, beta_ptr, acc1, acc0, prod_acc1, prod_acc0, alpha1, alpha0, ...]
    movdn.7
    # => [beta_ptr, acc1, acc0, prod_acc1, prod_acc0, alpha1, alpha0, digests_ptr, ...]
    drop drop drop
    # => [prod_acc1, prod_acc0, alpha1, alpha0, digests_ptr, ...]
    movup.2 drop
    movup.2 drop
    # => [prod_acc1, prod_acc0, digests_ptr, ...]
end

#! Computes the address where the public inputs are to be stored and returns it.
#!
#! In order to be able to call `arithmetic_circuit_eval`, we need to layout the inputs to
#! the constraint evaluation circuit in a contiguous region of memory (called `READ` section
#! in the ACE chiplet documentation) right before the region of memory storing the circuit
#! description (called `EVAL` section in the ACE chiplet documentation).
#! As the number of public inputs is a per-instance parameter, while the sizes of the OOD
#! evaluation frames and the number of auxiliary random values are fixed, we can lay out
#! the public inputs right before the auxiliary random values and OOD evaluations.
#! Hence the address where public inputs are stored is computed using a negative offset
#! from the address where the OOD are stored.
#!
#! Input: [...]
#! Output: [...]
proc.compute_and_store_public_inputs_address

    # 1) Get a pointer to where OOD evaluations are stored
    exec.constants::ood_trace_current_ptr

    # 2) Compute the offset
    #
    # The public inputs are made up of:
    # 
    # 1. the input operand stack and the output operand stack both of length 16 field elements,
    # 2. the digest of the program,
    # 3. the digests of procedures making up the kernel.
    #
    # In total, we need to allocate 16 * 2 * 2 + 4 * 2
    # We also need to allocate space for the auxiliary randomness, i.e., 2 * 2
    # We also need to allocate space for the result of reducing the kernel procedures using
    # the auxiliary randomness, i.e., 2.
    # We round up to the next multiple of 4 in order to guarantee memory word-alignment.
    sub.80

    # 3) Store the address of public inputs
    dup
    exec.constants::public_inputs_address_ptr mem_store

    # 4) Store the address of the variable length public inputs
    add.72
    exec.constants::variable_length_public_inputs_address_ptr mem_store
end

#! Loads 4 base field elements from the advice stack and saves them as extension field elements.
#!
#!
#! Input: [Y, Y, C, ptr, ...]
#! Output: [0, 0, 0, 0, A, C, ptr, ..]
proc.load_base_store_extension_word
    # 1) Load the 4 base elements making up the word from the advice stack and save them temporarily 
    adv_loadw
    exec.constants::tmp1 mem_storew

    # 2) Represent the 4 base field elements as elements in the quadratic extension field
    swapw
    exec.constants::zeroize_stack_word
    # => [0, 0, 0, 0, a3, a2, a1, a0, C, ptr, ...]
    movdn.6
    # => [0, 0, 0, a3, a2, a1, 0, a0, C, ptr, ...]
    movdn.4
    # => [0, 0, a3, a2, 0, a1, 0, a0, C, ptr, ...]
    movdn.2
    # => [0, a3, 0, a2, 0, a1, 0, a0, C, ptr, ...]


    # 3) Save the first 2 extension field elements
    swapw
    dup.12
    mem_storew

    # 4) Load the temporarily saved 4 base elements as a word for use in `hperm`
    exec.constants::tmp1 mem_loadw
    swapw

    # 5) Save the second 2 extension field elements
    dup.12 add.4
    mem_storew

    # 6) Load the ZERO word for padding
    exec.constants::zeroize_stack_word
end

#! Loads 8 base field elements from the advice stack and saves them as extension field elements.
#!
#!
#! Input: [Y, Y, C, ptr, ...]
#! Output: [A1, A0, C, ptr + 16, ..]
proc.load_base_store_extension_double_word
    # 1) Load the first 4 base elements from the advice stack and save them temporarily 
    adv_loadw
    exec.constants::tmp1 mem_storew

    # 2) Represent the first 4 base field elements as elements in the quadratic extension field
    swapw
    exec.constants::zeroize_stack_word
    # => [0, 0, 0, 0, a3, a2, a1, a0, C, ptr, ...]
    movdn.6
    # => [0, 0, 0, a3, a2, a1, 0, a0, C, ptr, ...]
    movdn.4
    # => [0, 0, a3, a2, 0, a1, 0, a0, C, ptr, ...]
    movdn.2
    # => [0, a3, 0, a2, 0, a1, 0, a0, C, ptr, ...]

    # 3) Save the first 2 extension field elements
    swapw
    dup.12
    mem_storew

    # 4) Load the second 4 base elements from the advice stack and save them temporarily
    adv_loadw
    exec.constants::tmp2 mem_storew
    swapw
    # => [0, a3, 0, a2, a7, a6, a5, a4, C, ptr, ...]

    # 5) Save the second 2 extension field elements
    dup.12 add.4
    mem_storew

    
    # 6) Represent the second 4 base field elements as elements in the quadratic extension field
    exec.constants::zeroize_stack_word
    # => [0, 0, 0, 0, a7, a6, a5, a4, C, ptr, ...]
    movdn.6
    movdn.4
    movdn.2
    # => [0, a7, 0, a6, 0, a5, 0, a4, C, ptr, ...]

    # 7) Save the third 2 extension field elements
    #    We also load the first 4 base elements as a word for use by `hperm`
    swapw
    dup.12
    add.8
    mem_storew
    exec.constants::tmp1 mem_loadw
    swapw

    # 8) Save the fourth 2 extension field elements
    #    We also load the second 4 base elements as a word for use by `hperm` and update the pointer
    dup.12
    add.16 swap.13
    add.12
    mem_storew
    exec.constants::tmp2 mem_loadw
    # => [a7, a6, a5, a4, a3, a2, a1, a0, C, ptr, ...]
end
