use.std::crypto::stark::constants
use.std::crypto::hashes::rpo


#! Load the public inputs in memory starting from the address referenced by `public_inputs_ptr`.
#! In parallel, compute the hash of the public inputs being loaded. The hashing starts with
#! capacity registers of the hash function set to `C` resulting from hashing the proof context.
#! The output D is the digest of the hashing of the public inputs.
#!
#! Input: [C, ...]
#! Output: [D, ...]
#! Cycles: ~40
export.load
    # Load the public inputs from the advice provider.
    # The public inputs are made up of:
    # 
    # 1. the input operand stack and the output operand stack both of length 16 field elements,
    # 2. the digest of the program
    # 3. the digests of procedures making up the kernel
    #
    # While loading the public inputs, we also absorb them in the Fiat-Shamir transcript.

    # 1) Load the input and output operand stacks
    exec.constants::public_inputs_ptr
    movdn.4
    padw padw
    repeat.4
        adv_loadw
        swapw
        adv_loadw
        hperm
    end

    # 2) Load the program digest
    adv_loadw

    # 3) Load the kernel procedures digests
    # TODO: Support non-empty kernels
    swapw
    exec.constants::zeroize_stack_word
    hperm

    exec.rpo::squeeze_digest
    movup.4 drop
end
