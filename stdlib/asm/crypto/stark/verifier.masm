use.std::crypto::fri::frie2f4
use.std::crypto::fri::ext2fri
use.std::crypto::fri::helper

use.std::crypto::stark::deep_queries
use.std::crypto::stark::random_coin
use.std::crypto::stark::ood_frames
use.std::crypto::stark::public_inputs
use.std::crypto::stark::utils

# Constants
const.ROOT_UNITY=7277203076849721926

# Global memory
const.ZERO_ZERO_ZERO_ONE_PTR=4294967294
const.ZERO_WORD_PTR=4294967295
const.SEED_PTR=4294967293
const.LDE_SIZE_PTR=4294967292
const.Z_PTR=4294967291

const.MAIN_TRACE_COM_PTR=4294967290
const.AUX_TRACE_COM_PTR=4294967289
const.COMPOSITION_POLY_COM_PTR=4294967288

const.TMP0=4294967287
const.TMP1=4294967286
const.TMP2=4294967285
const.TMP3=4294967284
const.TMP4=4294967283
const.TMP5=4294967282
const.TMP6=4294967281
const.TMP7=4294967280
const.TMP8=4294967279

const.OOD_TRACE_CURRENT_PTR=4294965000
const.OOD_TRACE_NEXT_PTR=4294965041
const.OOD_CONSTRAINT_EVALS_PTR=4294965082

const.AUX_RAND_ELEM_PTR=4294966000
const.COMPOSITION_COEF_PTR=4294966016
const.DEEP_RAND_CC_PTR=4294966338
const.FRI_QUERIES_PTR=4294966473
const.FRI_COM_PTR=4294966500

const.CURRENT_TRACE_ROW_PTR=4294964000
const.PUBLIC_INPUTS_PTR=4294960000


#!   Verify a STARK proof attesting to the correct execution of a program in the Miden VM.
#!   The following simplifying assumptions are currently made:
#!   - The blowup is set to 8, the grinding to 16bits and number of FRI queries to 27.
#!   - The maximal allowed degree of the remainder polynomial is 7.
#!   - Only the input and output stacks, assumed of fixed size equal to 16, are handled in regards
#!   to public inputs.
#!   - The following procedure makes use of global memory address beyond 3 * 2^30. More precisely,
#!   the following is a list of pointers used by `stark::verify`:    
#!
#!   * ZERO_ZERO_ZERO_ONE_PTR. [0, 0, 0, 1] used for hmerge in case the number of elements to be hashed is not divisible by 8
#!   * ZERO_WORD_PTR. [0, 0, 0, 0] used for hmerge in case the number of elements to be hashed is divisible by 8
#!   * SEED_PTR. Seed
#!   * LDE_SIZE_PTR. [lde_size, log2(lde_size), 0, 0]
#!   * Z_PTR. [z8_1, z8_0, z1, z0] where z = (z_0, z_1) is the OOD random element
#!   * MAIN_TRACE_COM_PTR. Main trace commitment
#!   * AUX_TRACE_COM_PTR. Aux trace commitment
#!   * COMPOSITION_POLY_COM_PTR. Constraint polynomial columns trace commitment
#!   * PUBLIC_INPUTS_PTR. Points to the memory region containing the public inputs.
#!   * AUX_RAND_ELEM_PTR.    Auxiliary trace random coefficients
#!   * COMPOSITION_COEF_PTR.    Constraint composition coefficients
#!   * OOD_TRACE_CURRENT_PTR.    Current row of the OOD evaluation frame 
#!   * OOD_TRACE_NEXT_PTR.    Next row of the OOD evaluation frame 
#!   * OOD_CONSTRAINT_EVALS_PTR.    value_i for i in 0..=7 where H(z) := \sum_0^7 value_i * z^i and H is the constraint compostion polynomial
#!   * DEEP_RAND_CC_PTR.    Deep query coefficients
#!   * FRI_QUERIES_PTR.    [poe, query_index, evaluation_1, evaluation_0] for the 27 FRI queries where poe = lde_domain_generator^query_index
#!   * TMP1.   [gz1, gz0, z1, z0]
#!   * TMP2.   [x, _, _, _] where x := offset * lde_domain_generator^query_index
#!   * TMP3.   Leaf value at index `query_index` of the commitment tree to either main, auxiliary or constraint traces.
#!   * TMP4.   [query_index, depth, _, _] where query_index is the current deep FRI query being computed.
#!   * TMP5.   [lde_size, log2(lde_size), lde_domain_generator, 0]
#!   * TMP6.   [num_fri_layers, remainder_size, lde_size, lde_domain_generator]
#!   * TMP7.   Remainder commitment
#!   * TMP8.   [ptr_remainder, remainder_size, lde_size, lde_size]
#!
#! Input: [log(trace_length), num_queries, log(blowup), grinding]
#! Output: []
export.verify

    # Pre-load constants used by hperm into memory
    # Since memory beyond 3 * 2^30 does not have any special meaning, we can use the memory region
    # starting from address 2^32 - 1 in decreasing order to hold constants that are used throughout 
    # the `verify` procedure.
    push.0.0.0.0
    mem_storew.ZERO_WORD_PTR
    drop
    push.1
    swap.3
    mem_storew.ZERO_ZERO_ZERO_ONE_PTR
    dropw
    #=> [log(trace_length), num_queries, log(blowup), grinding]

    #==============================================================================================
    #       I)  Hash proof context and hash-&-load public inputs
    #==============================================================================================

    # Initialize the seed using proof context
    exec.random_coin::init_seed
    #=> [C]
    
    # Load public inputs
    push.PUBLIC_INPUTS_PTR
    exec.public_inputs::load
    #=> [...]

    #==============================================================================================
    #       II) Generate the auxiliary trace random elements
    #==============================================================================================

    # Load main trace commitment and re-seed with it
    push.0.0.0.0
    adv_loadw          
    mem_storew.MAIN_TRACE_COM_PTR
    #=> [main_trace_commitment]
    exec.random_coin::reseed         
    # => [...]


    # Draw random ExtFelt for the auxiliary trace
    push.AUX_RAND_ELEM_PTR
    exec.random_coin::generate_aux_randomness
    # => [...] 

    # Reseed with auxiliary trace commitment
    push.0.0.0.0
    adv_loadw
    mem_storew.AUX_TRACE_COM_PTR
    exec.random_coin::reseed
    #=> [...]
 
    #==============================================================================================
    #       III) Draw constraint composition coefficients
    #==============================================================================================

    push.COMPOSITION_COEF_PTR
    exec.random_coin::generate_constraint_composition_coefficients
    #=> [...]

    #==============================================================================================
    #       IV) Reseed with commitment to constraint composition polynomial H evaluations over LDE
    #          and generate the Out-of-Domain (OOD) challenge z 
    #==============================================================================================

    # Reseed with constraint composition polynomial commitment
    push.0.0.0.0
    adv_loadw
    mem_storew.COMPOSITION_POLY_COM_PTR
    exec.random_coin::reseed
    exec.random_coin::generate_z_z8
    #=> [...]
   
    #==============================================================================================
    #       V) Read the OOD frames for the main trace, auxiliary trace and the trace of evaluations
    #           of H over the LDE domain.
    #==============================================================================================

    exec.ood_frames::load_evaluation_frame
    #=> [CURENT_ROW_HASH, NEXT_ROW_HASH, ...]

    exec.random_coin::reseed    
    exec.random_coin::reseed    
    
    exec.ood_frames::load_constraint_evaluations
    # => [CONSTR_EVAL_HASH, ...]

    exec.random_coin::reseed
    
    # Compute `H(z)`
    exec.ood_frames::compute_Hz
    # => [res1, res0, ...]

    #==============================================================================================
    #       VI) Evaluate the constraints over the OOD frame and assert equality with H(z)
    #==============================================================================================

    # TODO: Compare with the evaluation of the constraints on the EvaluationFrame
    drop drop
    #=> [...]

    #==============================================================================================
    #       VII) FRI
    #==============================================================================================

    #============================================
    #   1) Draw random coefficients for computing
    #       DEEP composition polynomial.
    #============================================

    push.DEEP_RAND_CC_PTR
    exec.random_coin::generate_deep_composition_random_coefficients

    #============================================
    #   2) Compute constants needed for computing
    #       FRI queries. These are:
    #       -   LDE domain generator.
    #       -   Trace domain generator `g`.
    #       -   `gz`.
    #       -   Number of FRI layers. 
    #============================================

    exec.helper::generate_fri_parameters
    # => [num_fri_layers, ...]

    #============================================
    #   3) Load and reseed with FRI layer commitments 
    #      and draw the folding challenges for 
    #      computing the degree respecting projection
    #============================================
    
    push.FRI_COM_PTR
    exec.helper::load_fri_layer_commitments
    #=> [...]

    #============================================
    #   4) Remainder verification:
    #       a) Check commitment to remainder polynomial
    #            coefficients.
    #       b) Load the NTT of remainder polynomial
    #            into memory.
    #       c) Check the NTT relationship.
    #============================================

    exec.helper::load_and_verify_remainder
    #=> [...]

    #============================================
    #   5) Check PoW nonce
    #============================================

    exec.utils::check_pow
    #=> [...]

    #============================================
    #   6) Compute evaluations of DEEP composition
    #   polynomial at randomly chosen query positions 
    #============================================

    # Draw random query indices
    push.FRI_QUERIES_PTR
    exec.random_coin::generate_list_indices
    # => [...]
    
    # Compute deep compostion polynomial queries
    exec.deep_queries::compute_deep_composition_polynomial_queries
    # => [...]

    #============================================
    #   7) Call the FRI verifier
    #============================================
    
    # Get domain generator and a pointer to the remainder codeword
    push.0.0.0.0
    mem_loadw.TMP0
    push.0.0
    mem_loadw.TMP8
    swap.3
    drop drop drop
    #=>[ptr_remainder, g]

    # Get the pointer to the first layer commitment
    push.FRI_COM_PTR

    # Get the pointer to the first FRI query
    push.FRI_QUERIES_PTR
    #=> [ptr_query, ptr_layer, ptr_remainder, domain_gen]

    # Call FRI verifier
    exec.frie2f4::verify
    #=> ()
end