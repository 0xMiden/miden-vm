use.std::crypto::stark::constants

#! Computes the adjustment factors needed during Horner evaluation.
#!
#! As `horner_eval_base` and `horner_eval_ext` operate on batches of 8 and 4 coefficients,
#! respectively, and when the number of coefficients of the polynomial we are evaluating
#! is not divisible by the size of the batch, we need to adjust the result to account
#! for this. The adjustment is performed by multiplying the Horner accumulator by
#! alpha^i where i depends on the number of coefficients missing in the last processed batch.
#! For example, if we are evaluating using `horner_eval_base`, and the last batch of coefficients
#! has only 7 coefficients, we would need then to multiply by alpha^1 to adjust the result.
#! Note that since we are evaluating throughout at alpha^{-1}, the adjustment factors are
#! alpha^i, if on the other hand we were evaluating at alpha then the factors would be alpha^{-i}.
#!
#! Input: [...]
#! Output: [...]  
#!
#! Cycles: 146
proc.compute_adjustment_power_z_quotients

    # Get alpha
    padw exec.constants::deep_rand_coef_ptr mem_loadw drop drop
    # => [alpha_1, alpha_0, ...]

    # First compute powers from 1 to 7
    
    ## a) First power
    dup.1 dup.1
    exec.constants::deep_rand_alpha_1
    mem_storew
    # => [alpha_1, alpha_0, alpha_1, alpha_0, ...]

    ## b) Second power
    dup.1 dup.1
    ext2mul
    dup.1 dup.1
    exec.constants::deep_rand_alpha_2
    mem_storew
    drop drop
    # => [alpha2_1, alpha2_0, alpha_1, alpha_0, ...]

    ## c) Third power
    dup.3 dup.3
    ext2mul
    dup.1 dup.1
    exec.constants::deep_rand_alpha_3
    mem_storew
    drop drop
    # => [alpha3_1, alpha3_0, alpha_1, alpha_0, ...]

    ## d) Fourth power
    dup.3 dup.3
    ext2mul
    dup.1 dup.1
    exec.constants::deep_rand_alpha_4
    mem_storew
    drop drop
    # => [alpha4_1, alpha4_0, alpha_1, alpha_0, ...]

    ## e) Fifth power
    dup.3 dup.3
    ext2mul
    dup.1 dup.1
    exec.constants::deep_rand_alpha_5
    mem_storew
    drop drop
    # => [alpha5_1, alpha5_0, alpha_1, alpha_0, ...]

    ## f) Sixth power
    dup.3 dup.3
    ext2mul
    dup.1 dup.1
    exec.constants::deep_rand_alpha_6
    mem_storew
    movdn.5 movdn.5
    # => [alpha6_1, alpha6_0, alpha_1, alpha_0, alpha6_1, alpha6_0, ...]

    ## g) Seventh power
    dup.3 dup.3
    ext2mul
    dup.1 dup.1
    exec.constants::deep_rand_alpha_7
    mem_storew
    drop drop
    # => [alpha7_1, alpha7_0, alpha_1, alpha_0, alpha6_1, alpha6_0, ...]


    # 2) Compute alpha^16
    dup.3 dup.3

    repeat.4
        dup.1 dup.1
        ext2mul
    end
    # => [alpha16_1, alpha16_0, alpha7_1, alpha7_0, alpha_1, alpha_0, alpha6_1, alpha6_0, ...]

    # 3) Compute alpha^64
    repeat.2
        dup.1 dup.1
        ext2mul
    end
    # => [alpha64_1, alpha64_0, alpha7_1, alpha7_0, alpha_1, alpha_0, alpha6_1, alpha6_0, ...]


    # 5) Compute alpha^77
    dup.3 dup.3
    # => [alpha7_1, alpha7_0, alpha64_1, alpha64_0, alpha7_1, alpha7_0, alpha_1, alpha_0, alpha6_1, alpha6_0, ...]
    movup.9 movup.9
    # => [alpha6_1, alpha6_0, alpha7_1, alpha7_0, alpha64_1, alpha64_0, alpha7_1, alpha7_0, alpha_1, alpha_0, ...]
    ext2mul
    # => [alpha13_1, alpha13_0, alpha64_1, alpha64_0, alpha7_1, alpha7_0, alpha_1, alpha_0, ...]
    ext2mul
    # => [alpha77_1, alpha77_0, alpha7_1, alpha7_0, alpha_1, alpha_0, ...]

    dup.1 dup.1
    exec.constants::deep_rand_alpha_77
    mem_storew
    drop drop
    # => [alpha77_1, alpha77_0, alpha7_1, alpha7_0, alpha_1, alpha_0, ...]

    # 6) Compute alpha^85
    ext2mul ext2mul
    dup.1 dup.1
    exec.constants::deep_rand_alpha_85
    mem_storew
    dropw
    # => [...]
end

#! Compute P^gz(alpha) and Q^z(alpha) where:
#!
#! P^gz(alpha) = (p_gz_0, p_gz_1) = \sum_{i=0}^{n+m} T_i * alpha^i 
#!
#! and 
#!
#! Q^z(alpha) = (q_z_0, q_z_1) = \sum_{i=0}^{n+m+l} S_i * alpha^i
#!
#! where:
#!
#! 1. n, m and l are the widths of the main segment, auxiliary segment and constraint composition
#!    traces, respectively.
#! 2. T_i are the evaluations of columns in the main segment and auxiliary segments
#!    at the the out-of-domain point gz.
#! 3. S_i are the evaluations of columns in the main segment, auxiliary segment and constraint composition
#!    at the the out-of-domain point z.
#! 4. alpha is the randomness used in order to build the DEEP polynomial.
#!
#! Input: [...]
#! Output: [p_gz_1, p_gz_0, q_z_1, q_z_0, ...]
#!
#! Cycles: 200
proc.compute_q_z_p_gz_at_alpha

    # I) Compute alpha^{-1} is and save it
    padw exec.constants::deep_rand_coef_ptr mem_loadw
    # => [y, y, alpha1, alpha0, ...]
    drop drop
    ext2inv
    dup.1 dup.1
    exec.constants::deep_rand_alpha_inv mem_storew

    # II) Compute Q^z(alpha)

    ## 1) Set up the stack for `horner_eval_ext`

    ### a) Set up the initial accumulator and the pointers to alpha^{-1} and a memory region
    ###    from which to load the OOD.
    push.0.0
    exec.constants::deep_rand_alpha_inv
    exec.constants::ood_trace_ptr
    exec.constants::tmp2 mem_storew

    ### b) Set up the rest of the stack
    swapw
    padw swapw
    padw

    ## 2) Load the execution trace, both main and auxiliary, portion of the OOD evaluation
    ##    Since (71 + 7) * 2 divmod 8 = (19, 4), we will need to handle the last batch of
    ##    4 base field elements separately.
    
    ### a) Process the first 19 batches of 8 field elements i.e., 4 quadratic extension field elements
    repeat.19
        mem_stream
        horner_eval_ext
    end

    ## 3) Load the last 2 extension field elements. We use `mem_stream` but we will discard the last
    ##    4 base field elements
    mem_stream
    # => [X, h3, h2, h1, h0, 0, 0, 0, 0, U, ...]

    ## 4) Load the constraint trace portion of the OOD evaluation
    ##    We now have 2 leftover extension field elements from the execution trace portion and
    ##    we need to leap forward to the constraint portion to start processing the next batch.
    ##    The way we do this is by saving these 2 extension field elements in the capcity portion
    ##    (i.e., the second deepest word of the stack) while we load the constraint OOD using `mem_stream`.
    ##    We will repeat the same manoeuvre again to handle this off-by-2 later on.

    ### a) Update the pointer to point to the memory portion containing the constraint portion of the OOD
    exec.constants::ood_constraint_evals_ptr swap.13 drop
    # => [X, h3, h2, h1, h0, 0, 0, 0, 0, U, ...]
    
    ### b) Move the off-by-two elements to the capacity portion
    movupw.2
    # => [0, 0, 0, 0, X, h3, h2, h1, h0, U, ...]

    ### c) Start loading the constraint OOD by loading the first batch of 4 extension field elements
    mem_stream
    # => [h7`, h6`, h5`, h4`, h3`, h2`, h1`, h0`, h3, h2, h1, h0, U, ...]

    ### d) We need to process the leftover elements first
    movdnw.2
    # => [h3`, h2`, h1`, h0`, h3, h2, h1, h0, h7`, h6`, h5`, h4`, U, ...]

    ### e) Compute using Horner
    horner_eval_ext

    ### f) Load the second and last batch of 4 extension field elements
    mem_stream
    # => [h15`, h14`, h13`, h12`, h11`, h10`, h9`, h8`, h7`, h6`, h5`, h4`, U, ...]

    ### g) Save the last 2 extension field elements for later in the capacity portion 
    movdnw.2
    # => [h11`, h10`, h9`, h8`, h7`, h6`, h5`, h4`, h15`, h14`, h13`, h12`, U, ...]    

    ### h) Compute using Horner
    horner_eval_ext
    # => [h11`, h10`, h9`, h8`, h7`, h6`, h5`, h4`, h15`, h14`, h13`, h12`, U, ...]    

    ### i) Process the last 2 extension field elements
    movdnw.2
    # => [h7`, h6`, h5`, h4`, h15`, h14`, h13`, h12`, h11`, h10`, h9`, h8`, U, ...]    
    exec.constants::zero_word mem_loadw
    horner_eval_ext
    # => [Y, Y, Y, ptr_ood, ptr_alpha, acc1, acc0, ...]

    ## 5) Multiply the accumulator by the adjustment factor in order to get Q^z(alpha)
    ##    We need to adjust by alpha^(71 + 7 + 8 - 1) because we are evaluating the reversed
    ##    polynomial at alpha^{-1} and by alpha^2 because the last `horner_eval_ext` call operated
    ##    only on a batch of 2 extension field elements out of 4, i.e., two slots where empty.
    swapdw
    drop drop

    ### a) Load alpha^85
    exec.constants::deep_rand_alpha_85 mem_loadw

    ### b) Load alpha^2
    push.0.0 exec.constants::deep_rand_alpha_2 mem_loadw drop drop
    
    ### c) Multiply the two adjustment factors
    ext2mul
    
    ### d) Multiply the accumulator by the adjustment factor to get Q^z(alpha)
    ext2mul

    ### e) Since we are going to subtract Q^z(alpha) from Q^x(alpha), it makes sense to compute
    ###    the negation only once and replace then the subtraction with an addition
    ext2neg
    # => [val1, val0, Y, Y, ...]

    ### f) Move the result so it is kept on the stack for later use
    movdn.9 movdn.9
    # => [Y, Y, q_z_1, q_z_0, ...]

    # III) Compute P^gz(alpha)

    ## 1) Set up the stack for `horner_eval_ext`
    push.0.0
    exec.constants::deep_rand_alpha_inv
    exec.constants::ood_constraint_evals_next_ptr
    padw
    swapdw
    # => [Y, Y, ZERO, ood_ptr, alpha_ptr, acc1, acc0, q_z_1, q_z_0, ...]

    ## 2) Process the first 19 batches of 8 field elements i.e., 4 quadratic extension field elements 
    repeat.19
        mem_stream
        horner_eval_ext
    end

    ## 3) Load and process the last 2 extension field elements. 
    ##    We use `mem_stream` but we will discard the last 4 field elements.
    mem_stream
    exec.constants::zero_word mem_loadw
    horner_eval_ext

    ## 5) Multiply the accumulator by the adjustment factor in order to get P^gz(alpha)
    ##    We need to adjust by alpha^(71 + 7 - 1) because we are evaluating the reversed
    ##    polynomial at alpha^{-1} and by alpha^2 because the last `horner_eval_ext` call operated
    ##    only on a batch of 2 extension field elements out of 4, i.e., two slots where empty.
    
    ### a) Load alpha^77
    swapdw
    drop drop
    exec.constants::deep_rand_alpha_77
    mem_loadw

    ### b) Load alpha^2
    push.0.0
    exec.constants::deep_rand_alpha_2
    mem_loadw
    drop drop

    ### c) Multiply the two adjustment factors
    ext2mul   

    ### d) Multiply the accumulator by the adjustment factor to get P^gz(alpha)
    ext2mul

    ### e) Since we are going to subtract P^gz(alpha) from P^x(alpha), it makes sense to compute
    ###    the negation only once and replace then the subtraction with an addition
    ext2neg
    # => [p_gz_1, p_gz_0, Y, Y, q_z_1, q_z_0, ...]

    ### f) Move the result so it is kept on the stack for later use
    movdn.9 movdn.9
    # => [Y, Y, p_gz_1, p_gz_0, q_z_1, q_z_0, ...]

    # IV) Clean up the stack
    dropw dropw
    # => [p_gz_1, p_gz_0, q_z_1, q_z_0, ...]
end

#! Loads the next query rows in the main, auxiliary and constraint composition polynomials traces
#! and computes the values of the DEEP code word at the index corresponding to the query.
#!
#! It takes a pointer to the current random query index and returns that index, together with
#! the values 
#!
#! P^x(alpha) = (p_x_at_alpha_0, p_x_at_alpha_1) = \sum_{i=0}^{n+m} T_i * alpha^i 
#!
#! and 
#!
#! Q^x(alpha) = (q_x_at_alpha_0, q_x_at_alpha_1) = \sum_{i=0}^{n+m+l} T_i * alpha^i
#!
#! where:
#!
#! 1. n, m and l are the widths of the main segment, auxiliary segment and constraint composition
#!    traces, respectively.
#! 2. T_i are the values of columns in the main segment, auxiliary segment and constraint composition
#!    traces, for the query.
#! 3. alpha is the randomness used in order to build the DEEP polynomial.
#!
#! Input: [Y, query_ptr, ...]
#! Output: [Y, q_x_at_alpha_1, q_x_at_alpha_0, p_x_at_alpha_1, p_x_at_alpha_0, index, query_ptr, ...]
#!
#! where:
#! - Y is a "garbage" word.
#!
#! Cycles: 280
proc.load_query_row
    # I) Process the main segment of the execution trace portion of the query

    ## 1) Load the query index
    dup.4
    mem_loadw
    #=> [index, depth, y, y, query_ptr, ...] where y are "garbage" values here and throughout

    ## 2) Get commitment to main segment of the execution trace
    movdn.3 movdn.2
    push.0.0
    exec.constants::main_trace_com_ptr mem_loadw
    #=>[R, depth, index, query_ptr, ...]

    ## 3) Use the commitment to get the leaf and save it
    dup.5 dup.5
    mtree_get
    exec.constants::tmp3 mem_storew
    adv.push_mapval
    #=>[V, R, depth, index, query_ptr, ...]
    exec.constants::tmp10 mem_loadw
    swapw
    #=>[V, ptr_x, ptr_alpha_inv, acc1, acc0, depth, index, query_ptr, ...]

    ## 4) Load the values of the main segment of the execution trace at the current query. We also
    ##    compute their hashing and the value of their random linear combination using powers of
    ##    a single random value alpha.

    ### a) Load the first 64 columns in 8 batches of 8 base field elements
    exec.constants::zero_zero_zero_seven_word mem_loadw
    padw
    padw
    #=> [Y, Y, 0, 0, 0, 7, ptr, y, y, y]
    repeat.8
        adv_pipe
        horner_eval_base      
        hperm
    end
    #=> [Y, L, C, ptr_x, ptr_alpha_inv, acc1, acc0, depth, index, query_ptr, ...]
   
    ### b) Load the values of the last 7 main segment columns
    movdnw.3
    adv_loadw
    #=> [L, C, ptr_x, ptr_alpha_inv, acc1, acc0, Y, depth, index, query_ptr, ...]
    adv_push.3
    push.0

    ### c) Hash and combine using randomness the last 7 columns
    horner_eval_base       
    hperm
    #=> [Y, D, C, ptr_x, ptr_alpha_inv, acc1, acc0, Y, depth, index, query_ptr, ...]
 
    ## 5) Load the leaf value we got using `mtree_get` and compare it against the hash
    ##    we just computed
    exec.constants::tmp3 mem_loadw
    movup.4
    assert_eq
    movup.3
    assert_eq
    movup.2
    assert_eq
    assert_eq
    #=> [Y, ptr_x, ptr_alpha_inv, acc1, acc0, Y, depth, index, query_ptr, ...]

    ## 6) Adjust the accumulator
    ##    Since the last batch to which we applied `horner_eval_base` was composed of 7 coefficients
    ##    instead of 8, we have to multiply the accumulator by the inverse of the evaluation point.
    ##    Since the evaluation point is alpha^{-1}, we thus need to multiply by alpha.
    ##    In general, we have to multiply by alpha^num_missing_coefficients, where 
    ##    `num_missing_coefficients` is in 1..=7
    exec.constants::deep_rand_alpha_1 mem_loadw
    movup.7 movup.7
    #=> [acc1, acc0, adj1, adj0, y, y, ptr_x, ptr_alpha_inv, Y, depth, index, query_ptr, ...]
    ext2mul
    movdn.5 movdn.5
    #=> [y, y, ptr_x, ptr_alpha_inv, acc1, acc0, Y, depth, index, query_ptr, ...]

    # II) Process the auxiliary segment of the execution trace portion of the query

    ## 1) Load aux trace commitment and get leaf
    push.0.0
    exec.constants::aux_trace_com_ptr mem_loadw

    ## 2) Get the leaf against the auxiliary trace commitment for the current query
    dup.13
    dup.13
    mtree_get
    exec.constants::tmp3 mem_storew
    adv.push_mapval
    #=> [L, R, ptr_x, ptr_alpha_inv, acc1, acc0, Y, depth, index, query_ptr, ...]

    ## 3) Load the values of the auxiliary segment of the execution trace at the current query.
    
    ### a) Set up the stack
    exec.constants::zero_zero_zero_six_word mem_loadw
    swapw
    movupw.3
    #=> [Y, Y, C, ptr_x, ptr_alpha_inv, acc1, acc0, depth, index, query_ptr, ...]

    ### b) Load the first 4 columns as a batch of 4 quadratic extension field elements.
    adv_pipe
    horner_eval_ext      
    hperm
    #=> [Y, Y, C, ptr_x, ptr_alpha_inv, acc1, acc0, depth, index, query_ptr, ...]

    ### c) Load the last 3 columns as quadratic extension field elements. 
    ###    Instead of droping the "garbage" word we keep on the stack for later.
    movdnw.3
    adv_loadw
    adv_push.2
    push.0.0
    horner_eval_ext        
    hperm
    #=> [Y, D, C, ptr_x, ptr_alpha_inv, acc1, acc0, Y, depth, index, query_ptr, ...]

    ## 4) Load the leaf value we got using `mtree_get` and compare it against the hash
    ##    we just computed
    exec.constants::tmp3 mem_loadw
    movup.4
    assert_eq
    movup.3
    assert_eq
    movup.2
    assert_eq
    assert_eq
    #=> [Y, ptr_x, ptr_alpha_inv, acc1, acc0, Y, depth, index, query_ptr, ...]

    ## 6) Adjust the accumulator
    ##    Since the last batch to which we applied `horner_eval_ext` was composed of 3 coefficients
    ##    instead of 4, we have to multiply the accumulator by the inverse of the evaluation point.
    ##    Since the evaluation point is alpha^{-1}, we thus need to multiply by alpha.
    ##    In general, we have to multiply by alpha^num_missing_coefficients, where 
    ##    `num_missing_coefficients` is in 1..=3
    exec.constants::deep_rand_alpha_1 mem_loadw drop drop
    movup.5 movup.5
    #=> [acc1, acc0, adj1, adj0, ptr_x, ptr_alpha_inv, Y, depth, index, query_ptr, ...]
    ext2mul
    movdn.3 movdn.3
    #=> [ptr_x, ptr_alpha_inv, acc1, acc0, Y, depth, index, query_ptr, ...]

    # III) Compute P^x(alpha).
    #      This is the result of multiplying the current value of the accumulator by
    #      alpha^(71 + 7 - 1) i.e., alpha^77.

    ## 1) Load and multiply by alpha^77
    swapw
    exec.constants::deep_rand_alpha_77 mem_loadw
    #=> [alpha77_1, alpha77_0, y, y, ptr_x, ptr_alpha_inv, acc1, acc0, depth, index, query_ptr, ...]
    dup.7 dup.7
    ext2mul
    #=> [p_x_at_alpha_1, p_x_at_alpha_0, y, y, ptr_x, ptr_alpha_inv, acc1, acc0, depth, index, query_ptr, ...]
 
    ## 2) Keep P^x(alpha) deeper on the stack
    movdn.8
    movdn.8
    #=> [y, y, ptr_x, ptr_alpha_inv, acc1, acc0, depth, p_x_at_alpha_1, p_x_at_alpha_0, index, query_ptr, ...]

    # IV) Process the constraint trace portion of the query

    ## 1) Load the commitment to the constraint trace
    push.0.0
    exec.constants::composition_poly_com_ptr mem_loadw

    ## 2) Get the leaf against the commitment
    dup.11
    movup.9
    mtree_get
    exec.constants::tmp3 mem_storew
    adv.push_mapval
    #=>[L, R, ptr_x, ptr_alpha_inv, acc1, acc0, p_x_at_alpha_1, p_x_at_alpha_0, index, query_ptr, ...]

    ## 3) Load the 8columns as quadratic extension field elements in batches of 4. 
    padw
    swapw.2
    repeat.2
        adv_pipe
        horner_eval_ext        
        hperm
    end
    #=> [Y, L, Y, ptr_x, ptr_alpha_inv, acc1, acc0, p_x_at_alpha_1, p_x_at_alpha_0, index, query_ptr, ...]

    ## 4) Load the leaf value we got using `mtree_get` and compare it against the hash
    ##    we just computed
    exec.constants::tmp3 mem_loadw
    movup.4
    assert_eq
    movup.3
    assert_eq
    movup.2
    assert_eq
    assert_eq
    #=> [Y, ptr_x, ptr_alpha_inv, acc1, acc0, p_x_at_alpha_1, p_x_at_alpha_0, index, query_ptr, ...]

    # III) Compute Q^x(alpha).
    #      This is the result of multiplying the current value of the accumulator by
    #      alpha^(71 + 7 + 8 - 1) i.e., alpha^85.

    ## 1) Load alpha^(71 + 7 + 8 - 1) i.e., alpha^85
    swapw
    drop drop
    exec.constants::deep_rand_alpha_85_0 mem_load
    exec.constants::deep_rand_alpha_85_1 mem_load
    #=> [alpha77_1, alpha77_0, acc1, acc0, Y, depth, index, query_ptr, ...]

    ## 2) Multiply by alpha^85
    ext2mul
    #=> [q_x_at_alpha_1, q_x_at_alpha_0, Y, p_x_at_alpha_1, p_x_at_alpha_0, index, query_ptr, ...]

    ## 3) Keep Q^x(alpha) deeper on the stack
    movdn.5 movdn.5
    #=> [Y, q_x_at_alpha_1, q_x_at_alpha_0, p_x_at_alpha_1, p_x_at_alpha_0, index, query_ptr, ...]
end

#! Takes a query index and computes x := offset * domain_gen^index. It also computes the denominators
#! (x - z) and (x - gz).
#!
#! Input: [Y, Y, index, ...]
#! Output: [Z, Y, x, index, ...]  
#!
#! where:
#! - Z := [-gz1, x -gz0, -z1, x - z0]
#! - Y is a "garbage" word
#!
#! Cycles: 58
proc.compute_denominators
    # Compute x = offset * domain_gen^index
    exec.constants::lde_domain_info_ptr mem_loadw
    #=> [lde_size, depth, domain_gen, 0, Y, index, ...]
    movup.2
    dup.8
    exp.u32
    exec.constants::domain_offset mul
    #=> [x, lde_size, depth, 0, Y, index, ...]

    # Get z and gz from memory
    movdn.3
    #=> [lde_size, depth, 0, x, Y, index, ...]
    push.0
    exec.constants::tmp1 mem_loadw
    #=> [-z0, -gz0, -gz1, -z1, x, Y, index, ...]

    dup.4 add
    #=> [x-z0, -gz0, -gz1, -z1, x, Y, index, ...]
    movdn.3
    #=> [-gz0, -gz1, -z1, x-z0, x, Y, index, ...]

    movup.4 dup movdn.9
    #=> [x, -gz0, -gz1, -z1, x-z0, Y, x, index, ...]

    add swap
    #=> [-gz1, x - gz0, -z1, x-z0, Y, x, index, ...]
end

#! Computes the DEEP query.
#!
#! Input: [Z, X, Y, W, query_ptr, ...]
#! Ouput: [eval1, eval0, Y, query_ptr, ...]
#!
#! where:
#!
#! 1. X is [q_x_at_alpha_1, q_x_at_alpha_0, p_x_at_alpha_1, p_x_at_alpha_0]
#! 2. W is [p_gz_1, p_gz_0, q_z_1, q_z_0]
#!
#! Cycles: 62
proc.divide_and_add
    swapw
    #=> [X, Z, Y, W, query_ptr, ...]
    dupw.3
    #=> [W, X, Z, Y, query_ptr, ...]
    #=> [p_gz_1, p_gz_0, q_z_1, q_z_0, q_x_at_alpha_1, q_x_at_alpha_0, p_x_at_alpha_1, p_x_at_alpha_0, Z, Y, query_ptr, ...]

    movup.5 movup.5
    movup.5 movup.5
    #=> [q_z_1, q_z_0, q_x_at_alpha_1, q_x_at_alpha_0, p_gz_1, p_gz_0, p_x_at_alpha_1, p_x_at_alpha_0, Z, Y, query_ptr, ...]

    ext2add
    #=> [num0_1, num0_0, p_gz_1, p_gz_0, p_x_at_alpha_1, p_x_at_alpha_0, Z, Y, query_ptr, ...]

    movdn.9 movdn.9
    #=> [p_gz_1, p_gz_0, p_x_at_alpha_1, p_x_at_alpha_0, Z, num0_1, num0_0, Y, query_ptr, ...]

    ext2add
    #=> [num1_1, num1_0, Z, num0_1, num0_0, Y, query_ptr, ...]

    movup.3 movup.3
    ext2div
    #=> [res1_1, res1_0, z0_1, z0_0, num0_1, num0_0, Y, query_ptr, ...]
    movdn.5 movdn.5
    #=> [z0_1, z0_0, num0_1, num0_0, res1_1, res1_0, Y, query_ptr, ...]
    ext2div
    #=> [res0_1, res0_0, res1_1, res1_0, Y, query_ptr, ...]

    ext2add
    # => [eval1, eval0, Y, query_ptr, ...]
end

#! Compute the DEEP composition polynomial FRI queries.
#!
#! Input: [query_ptr, ...]
#! Output: [query_ptr, ...]
#! Cycles: 386 + num_queries * 414
export.compute_deep_composition_polynomial_queries
    exec.constants::get_fri_queries_address

    exec.compute_adjustment_power_z_quotients                               # (Cycles: 146)

    exec.compute_q_z_p_gz_at_alpha                                          # (Cycles: 200)
    # => [p_gz_1, p_gz_0, q_z_1, q_z_0, query_ptr, ...]
    # => [W, query_ptr, ...]

    # Get pointer to help test for the last query to be processed
    exec.constants::fri_com_ptr
    # => [query_end_ptr, W, query_ptr, ...]
    dup.5
    # => [query_ptr, query_end_ptr, W, query_ptr, ...]

    # Store pointers to alpha_inv, memory region to store trace row for current query and a fresh
    # accumulator value i.e., (0, 0).
    push.0.0
    exec.constants::deep_rand_alpha_inv
    exec.constants::current_trace_row_ptr
    exec.constants::tmp10 mem_storew

    # Compute the negations of z and gz where z is the OOD point
    # We do it here as this computation is common to all queries.
    exec.constants::z_ptr mem_loadw
    # => [zN_1, zN_0, z1, z0, query_ptr, query_end_ptr, W, query_ptr, ...]
    drop drop
    neg swap neg  
    # => [-z0, -z1, query_ptr, query_end_ptr, W, query_ptr, ...]
    dup.1 exec.constants::get_trace_domain_generator mul
    # => [-gz1, -z0, -z1, query_ptr, query_end_ptr, W, query_ptr, ...]
    swap
    # => [-z0, -gz1, -z1, query_ptr, query_end_ptr, W, query_ptr, ...]
    dup exec.constants::get_trace_domain_generator mul
    # => [-gz0, -z0, -gz1, -z1, query_ptr, query_end_ptr, W, query_ptr, ...]
    swap
    # => [-z0, -gz0, -gz1, -z1, query_ptr, query_end_ptr, W, query_ptr, ...]
    # Save to temporary location `tmp1` for later use when computing the denominators
    exec.constants::tmp1 mem_storew
    # => [Y, query_ptr, query_end_ptr, W, query_ptr, ...]                   # (Cycles: 28)

    push.1
    while.true
        # I)
        #
        # Load the (main, aux, constraint)-traces rows associated with the current query and get
        # the index of the query.
        #
        # Cycles: 280
        exec.load_query_row
        #=>[Y, X, index, query_ptr, query_end_ptr, W, query_ptr, ...]

        # II)
        #
        # Compute x := offset * domain_gen^index and denominators (x - z) and (x - gz)
        #
        # Cycles: 58
        exec.compute_denominators
        #=> [Z, X, x, index, query_ptr, query_end_ptr, W, query_ptr, ...] where Z := [-gz1, x - gz0, -z1, x - z0]

        # III)
        # Compute final result
        #
        # Cycles: 62
        exec.divide_and_add
        #=> [eval1, eval0, x, index, query_ptr, query_end_ptr, W, query_ptr, ...]

        # IV)
        #
        # Store [poe, index, eval_1, eval_0] where poe := g^index = x / offset and prepare stack
        # for next iteration.

        ## a) Compute poe
        ##
        ## Cycles: 4
        movup.3 movup.3
        exec.constants::domain_offset_inv mul
        #=> [poe, index, eval1, eval0, query_ptr, query_end_ptr, W, query_ptr, ...]

        ## b) Store [eval0, eval1, index, poe]
        ##
        ## Cycles: 5
        dup.4 add.4 swap.5
        mem_storew
        #=> [poe, index, eval1, eval0, query_ptr+1, query_end_ptr, W, query_ptr, ...]

        ## c) Prepare stack for next iteration
        ##
        ## Cycles: 4
        dup.5 dup.5
        neq
        #=> [?, Y, query_ptr+1, query_end_ptr, ...]
    end
    dropw dropw drop drop drop
end
