use.std::crypto::hashes::rpo
use.std::sys

# ENCODING CONVENTIONS
# ================================================================================================
#
# This module uses the following notation for data representation:
# - Byte arrays are stored in memory as packed u32 values in little-endian format
# - Each u32 represents 4 bytes: u32 = u32::from_le_bytes([b0, b1, b2, b3])
# - Unused bytes in the final u32 must be set to zero
# - Memory addresses must be word-aligned (divisible by 4)

# Constants
# ================================================================================================

const.ECDSA_VERIFY_EVENT=event("stdlib::crypto::dsa::ecdsa::verify")

const.PK_LEN_FELTS=9     # 33.div_ceil(4)
const.DIGEST_LEN_FELTS=8 # 32.div_ceil(4)
const.SIG_LEN_FELTS=17   # 66.div_ceil(4)

# PROCEDURES
# ================================================================================================

#! Verifies an ECDSA signature over the secp256k1 curve.
#!
#! This procedure uses deferred verification via a precompile. The actual cryptographic
#! verification is performed by the host, and the result is provided via the advice stack.
#!
#! Input: `[pk_ptr, digest_ptr, sig_ptr, ...]`
#! Output: `[result, ...]`
#!
#! Where:
#! - `pk_ptr`: word-aligned memory address containing the 33-byte compressed secp256k1 public key
#! - `digest_ptr`: word-aligned memory address containing the 32-byte message digest
#! - `sig_ptr`: word-aligned memory address containing the 66-byte signature
#! - `result`: 1 if the signature is valid, 0 if invalid
#!
#! All data must be stored in memory as packed u32 values (little-endian), with unused bytes
#! in the final u32 set to zero.
export.verify
    exec.verify_impl
    # => [COMM, TAG, result, ...]

    # Log the precompile request for deferred verification
    exec.sys::log_precompile_request
    # => [result, ...]
end

# INTERNAL PROCEDURES
# ================================================================================================

#! Internal implementation of ECDSA signature verification via deferred computation.
#!
#! Emits an event to trigger the precompile handler, reads the verification result from
#! the advice stack, and computes the commitment and tag for tracking deferred verification.
#!
#! This procedure mimics the `ecdsa_secp256k1::PublicKey::verify_prehash()` function from
#! `miden-crypto`, which takes a pre-hashed message that the caller must provide
#! (e.g. obtained using the keccak256 precompile).
#!
#! Input: `[pk_ptr, digest_ptr, sig_ptr, ...]`
#! Output: `[COMM, TAG, result, ...]`
#!
#! Where:
#! - `pk_ptr`: word-aligned memory address containing 33-byte public key
#! - `digest_ptr`: word-aligned memory address containing 32-byte digest
#! - `sig_ptr`: word-aligned memory address containing 66-byte signature
#! - `COMM`: commitment to calldata computed as
#!       `Rpo256(Rpo256(Rpo256(pk) || Rpo256(digest)) || Rpo256(sig))`
#! - `TAG`: `[ECDSA_VERIFY_EVENT, result, 0, 0]`
#! - `result`: 1 if signature is valid, 0 if invalid
export.verify_impl
    emit.ECDSA_VERIFY_EVENT
    # => [pk_ptr, digest_ptr, sig_ptr, ...]

    # Read verification result from advice stack (provided by the host)
    adv_push.1
    # => [result, pk_ptr, digest_ptr, sig_ptr, ...]

    # Compute commitment: COMM = Rpo256(Rpo256(Rpo256(pk) || Rpo256(digest)) || Rpo256(sig))
    # Compute COMM_PK = Rpo256(pk)
    push.PK_LEN_FELTS movup.2 exec.rpo::hash_memory
    # => [COMM_PK, result, digest_ptr, sig_ptr]

    # Compute COMM_DIGEST = Rpo256(digest_bytes)
    push.DIGEST_LEN_FELTS movup.6 exec.rpo::hash_memory
    # => [COMM_DIGEST, COMM_PK, result, sig_ptr]

    # Merge COMM_PK and COMM_DIGEST into COMM_PK_DIGEST = Rpo256(Rpo256(pk) || Rpo256(digest))
    hmerge
    # => [COMM_PK_DIGEST, result, sig_ptr]

    # Compute COMM_SIG = Rpo256(sig_bytes)
    push.SIG_LEN_FELTS movup.6 exec.rpo::hash_memory
    # => [COMM_SIG, COMM_PK_DIGEST, result]

    # Merge into final commitment COMM = Rpo256(COMM_PK_DIGEST || COMM_SIG)
    hmerge
    # => [COMM, result]

    # Create TAG = [ECDSA_VERIFY_EVENT, result, 0, 0]
    push.ECDSA_VERIFY_EVENT dup.5 push.0.0 swapw
    # => [COMM, TAG, result]
end
