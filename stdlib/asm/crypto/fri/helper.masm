use.std::crypto::fri::ext2fri
use.std::crypto::stark::random_coin
use.std::crypto::stark::constants

#! Compute the number of FRI layers given log2 of the size of LDE domain. It also computes the
#! LDE domain generator and, from it, the trace generator and store these for later use.
#!
#! Input: [...]
#! Output: [num_fri_layers, ...]
#! Cycles: 77
export.generate_fri_parameters
    # Load FRI verifier data
    padw exec.constants::get_lde_domain_info_word
    #=> [lde_size, log(lde_size), lde_g, 0, ...] (6 cycles)

    # Store temporarily in order to use it for FRI layer loading
    exec.constants::tmp1 mem_storew

    # Compute [gz1, gz0, z1, z0] using domain generator
    # TODO: move to somewhere else
    # ---------------------------------------------------------------------------------------------

    # load z from memory
    padw
    exec.constants::z_ptr mem_loadw
    #=> [(z1, z0)^n, z1, z0, lde_size, log2(lde_size), lde_g, 0, ...] (6 cycles)

    # prepare stack
    drop
    drop
    dup.1
    dup.1
    dup.6
    drop
    #=> [z1, z0, z1, z0, lde_size, log2(lde_size), lde_g, 0, ...] (6 cycles)

    # Load `trace_g` from memory
    exec.constants::get_trace_domain_generator
    #=> [trace_g, z1, z0, z1, z0, lde_size, log2(lde_size), lde_g, 0, ...] (2 cycles)

    # Compute `gz0` = `trace_g * z_0`
    dup
    movup.3
    mul
    #=> [gz0, trace_g, z1, z0, z1, z0, lde_size, log2(lde_size), lde_g, 0, ...] (3 cycles)

    # Compute `gz1` = `trace_g * z_1`
    swap.2
    mul
    #=> [gz1, gz0, z1, z0, lde_size, log2(lde_size), lde_g, 0, ...] (2 cycles)

    # Save `[gz1, gz0, z1, z0]` and clean the stack
    exec.constants::tmp1 mem_storew
    dropw
    #=> [lde_size, log2(lde_size), lde_g, 0, ...] (6 cycles)

    # Compute the number of FRI layers
    dup
    dup.2
    dup
    is_odd
    if.true
        push.512
        swap
        sub.9
        div.2
    else
        push.1024
        swap
        sub.10
        div.2
    end
    # => [num_fri_layers, remainder_size, lde_size, lde_size, log2(lde_size), domain_gen, 0, ...] (12 cycles)

    exec.constants::set_num_fri_layers
    div.8
    exec.constants::set_remainder_poly_size
    # => [lde_size, lde_size, log2(lde_size), domain_gen, 0, ...] (7 cycles)

    dropw
    drop
    # => [...] (5 cycles)
end

#! Get FRI layer commitments and reseed with them in order to draw folding challenges i.e. alphas.
#!
#! Input: [...]
#! Output: [...]
#! Cycles: 21 + 83 * num_fri_layers
export.load_fri_layer_commitments
    # Address containing the first layer commitment
    push.0.0
    push.0.0.0.0
    exec.constants::fri_com_ptr
    exec.constants::get_num_fri_layers
    # => [num_layers, ptr_layer, y, y, Y, ...]

    padw exec.constants::get_lde_domain_info_word
    #=> [lde_size, log(lde_size), lde_g, 0, ...] (6 cycles)

    # Store temporarily in order to use it for FRI layer loading
    exec.constants::tmp1 mem_storew
    dropw

    dup
    push.0
    neq
    while.true
        swapw               # [Y, num_layers, ptr_layer, y, y, ...]
        adv_loadw           # [COM, num_layers, ptr_layer, y, y, ...]

        # Save FRI layer commitment
        dup.5
        add.4
        swap.6
        mem_storew
        #=> [COM, num_layers, ptr_layer + 4, y, y, ...]

        # Reseed
        exec.random_coin::reseed
        # => [num_layers, ptr_layer + 4, y, y, ...]

        push.0.0.0.0
        exec.random_coin::get_rate_1
        #=> [R1, ZERO, num_layers, ptr_layer + 4, y, y, ... ]
        push.0.0
        exec.constants::tmp1 mem_loadw
        # => [lde_size, log2(lde_size), lde_generator, 0, a1, a0, Y, num_layers, ptr_layer + 4, y, y, ...]

        # Compute and save to memory new lde_size and its new logarithm
        div.4
        swap
        sub.2
        swap
        exec.constants::tmp1 mem_storew

        # Move the pointer higher up the stack
        movup.2 drop
        movup.2 drop
        swapw
        dropw
        # => [lde_size, log2(lde_size), a1, a0, num_layers, ptr_layer + 4, y, y, Y, ...]

        # Save [lde_size, log2(lde_size), a1, a0] in memory next to the layer commitment
        dup.5
        add.4
        swap.6
        mem_storew
        swapw
        # => [num_layers, ptr_layer + 8, y, y, lde_size, log2(lde_size), a1, a0, Y]

        # Decrement the FRI layer counter
        sub.1
        dup
        push.0
        neq
    end
    # => [Y, Y]
    dropw
    dropw
    #=> [...]
end

#! Load and save the remainder polynomial from the advice provider and check that its hash
#! corresponds to its commitment and reseed with the latter.
#!
#! Input: [...]
#! Output: [...]
#!
#! Cycles:
#!  1- Remainder of size 32: 1633
#!  2- Remainder of size 64: 3109
export.load_and_verify_remainder
    # Load remainder commitment and save it at `TMP7`
    push.0.0.0.0
    adv_loadw
    exec.constants::tmp1 mem_storew
    #=> [COM, ...]

    # Reseed with remainder commitment
    exec.random_coin::reseed
    #=> [...]

    # `adv_pipe` the remainder codeword
    ## Get the numbers of FRI layers
    exec.constants::get_num_fri_layers
    ## Compute the correct remainder pointer, note that the remainder poly is laid out just after
    ## the FRI layer commitments, each saved in a word, and folding challenges, also saved in
    ## a word, and this explains the multiplication by 8
    mul.8 exec.constants::fri_com_ptr add
    #=> [fri_com_ptr, 8 * num_fri_layers, ...]
    ## Store for later use
    dup exec.constants::set_remainder_poly_address
    #=> [remainder_poly_ptr, ...]

    exec.constants::get_remainder_poly_size
    push.64

    eq
    if.true
        # Remainder polynomial degree less than 64
        push.0.0.0.0
        push.0.0.0.0
        push.0.0.0.0
        # => [Y, Y, 0, 0, 0, 0 remainder_poly_ptr, remainder_size, y, y]

        # adv_load remainder polynomial
        repeat.16
            adv_pipe hperm
        end

        # Compare Remainder_poly_com with the read commitment
        exec.constants::tmp1 mem_loadw
        movup.4
        assert_eq
        movup.3
        assert_eq
        movup.2
        assert_eq
        assert_eq
        
    else
        # Remainder polynomial degree less than 128
        push.0.0.0.0
        push.0.0.0.0
        push.0.0.0.0
        # => [Y, Y, 0, 0, 0, 0 remainder_poly_ptr, remainder_size, y, y]

        # adv_load remainder polynomial
        repeat.32
            adv_pipe hperm
        end
        # => [Y, Remainder_poly_com, Y, remainder_poly_ptr, remainder_size, y, y]

        # Compare Remainder_poly_com with the read commitment
        exec.constants::tmp1 mem_loadw
        movup.4
        assert_eq
        movup.3
        assert_eq
        movup.2
        assert_eq
        assert_eq
        
    end
    dropw dropw
    #=> [...]
end

#! Compute the pointer to the first word storing the FRI queries.
#!
#! Since the FRI queries are laid out just before the FRI commitments, we compute the address
#! to the first FRI query by subtracting from the pointer to the first FRI layer commitment
#! the total number of queries.
#!
#! Input: [...]
#! Output: [...]
#!
#! Cycles: 7
export.compute_query_pointer
    exec.constants::fri_com_ptr
    exec.constants::get_number_queries
    mul.4
    # => [num_queries*4, fri_com_ptr,  ...]

    sub
    # => [query_ptr, ...]

    exec.constants::set_fri_queries_address
    # => [...]
end
