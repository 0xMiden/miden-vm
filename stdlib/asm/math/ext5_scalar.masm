#! Performs raw subtraction of scalar element ( say b ) from another one ( say a ),
#! without any reduction i.e. r = a - b
#!
#! Expected stack state 
#!
#! [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ...]
#!
#! Final stack state
#!
#! [c, r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, ...]
#!
#! Note, if c == 0xffff_ffff, overflow has occurred during subtraction
#!       else c == 0, no overflow occurred during subtraction.
#!
#! Adapted from equivalent Rust implementation https://github.com/itzmeanjan/miden/blob/e7038e45865a7032a0629346921a77010e82862d/miden/tests/integration/stdlib/math/ext5_scalar.rs#L56-L74
export.sub_inner
    push.0

    movup.11
    movup.2
    swap
    u32overflowing_sub
    swap
    movup.2
    u32overflowing_sub
    movup.2
    or

    movup.11
    movup.3
    swap
    u32overflowing_sub
    swap
    movup.2
    u32overflowing_sub
    movup.2
    or

    movup.11
    movup.4
    swap
    u32overflowing_sub
    swap
    movup.2
    u32overflowing_sub
    movup.2
    or

    movup.11
    movup.5
    swap
    u32overflowing_sub
    swap
    movup.2
    u32overflowing_sub
    movup.2
    or

    movup.11
    movup.6
    swap
    u32overflowing_sub
    swap
    movup.2
    u32overflowing_sub
    movup.2
    or

    movup.11
    movup.7
    swap
    u32overflowing_sub
    swap
    movup.2
    u32overflowing_sub
    movup.2
    or

    movup.11
    movup.8
    swap
    u32overflowing_sub
    swap
    movup.2
    u32overflowing_sub
    movup.2
    or

    movup.11
    movup.9
    swap
    u32overflowing_sub
    swap
    movup.2
    u32overflowing_sub
    movup.2
    or

    movup.11
    movup.10
    swap
    u32overflowing_sub
    swap
    movup.2
    u32overflowing_sub
    movup.2
    or

    movup.11
    movup.11
    swap
    u32overflowing_sub
    swap
    movup.2
    u32overflowing_sub
    movup.2
    or

    push.0
    swap
    u32wrapping_sub

    swap
    movup.2
    movup.3
    movup.4
    movup.5
    movup.6
    movup.7
    movup.8
    movup.9
    movup.10 # = (r0, r1, r2, r3, r4, r5, r6, r7, r8, r9)

    movup.10 # = c 
end
