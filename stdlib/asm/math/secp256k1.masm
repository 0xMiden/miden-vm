# Given [a, b, c, carry] on stack top, following function computes
#
#  tmp = a + (b * c) + carry
#  hi = tmp >> 32
#  lo = tmp & 0xffff_ffff
#  return (hi, lo)
#
# At end of execution of this function, stack top should look like [hi, lo]
# See https://github.com/itzmeanjan/secp256k1/blob/ec3652afe8ed72b29b0e39273a876a898316fb9a/utils.py#L75-L80
proc.mac
  swap
  movup.2
  u32madd.unsafe
  
  swap
  movup.2
  u32add.unsafe

  movup.2
  add
end

# Given [a, b, borrow] on stack top, following function computes
#
#  tmp = a - (b + borrow)
#  hi = tmp >> 32
#  lo = tmp & 0xffff_ffff
#  return (hi, lo)
#
# At end of execution of this function, stack top should look like [hi, lo]
# See https://github.com/itzmeanjan/secp256k1/blob/ec3652afe8ed72b29b0e39273a876a898316fb9a/utils.py#L83-L89
proc.sbb
  movdn.2
  u32add.unsafe
  drop
  u32sub.full
end

# Given [a0, a1, a2, a3, a4, a5, a6, a7, b, c_0_addr, c_1_addr] on stack top,
#  this function computes a multiplication of u256 by u32, while also
#  considering u256 computed during previous round.
#
#  - Multiplicand u256 in this context is kept in memory, whose 8 limbs can be loaded
#  into stack by pushing content at memory location `c_1_addr` & `c_0_addr`, in order.
#  - Multiplier u32 is `b` i.e. stack[8] element.
#  - Note, previous round's u256 is kept in first 8 stack elements.
#
#  After finishing execution of this function, stack top should hold u288 i.e.
#
#  [a0, a1, a2, a3, a4, a5, a6, a7, a8] | a8 = carry
proc.u256xu32
  dup.9
  pushw.mem
  dup.12

  push.0
  swap
  movup.2
  swap
  movup.6
  exec.mac

  movup.2
  dup.12
  movup.6
  exec.mac

  movup.3
  dup.11
  movup.6
  exec.mac

  movup.4
  dup.10
  movup.6
  exec.mac

  dup.11
  pushw.mem

  movup.4
  swap
  dup.13
  movup.10
  exec.mac

  movup.2
  dup.12
  movup.10
  exec.mac

  movup.3
  dup.11
  movup.10
  exec.mac

  movup.4
  movup.10
  movup.10
  exec.mac

  swap
  movup.2
  movup.3
  movup.4
  movup.5
  movup.6
  movup.7
  movup.8
end

# Given [c0, c1, c2, c3, c4, c5, c6, c7, c8, pc] on stack top,
# this function attempts to reduce 288 -bit number to 256 -bit number
# along with carry, using montgomery reduction method
#
# In stack top content c[0..9] i.e. first 9 elements, holding 288 -bit
# number. Stack element `pc` ( at stack[9] ) is previous reduction round's
# carry ( for first reduction round, it'll be set to 0 ).
#
# After finishing execution of this function, stack top should look like
#
# [c0, c1, c2, c3, c4, c5, c6, c7, pc] | pc = next round's carry
proc.u288_reduce
  dup
  push.3525653809
  u32mul.unsafe
  drop 
  # q at stack top #

  dup
  push.0.4294966319
  movup.2
  movup.4
  exec.mac
  swap
  drop

  push.4294967294
  dup.2
  movup.4
  exec.mac

  push.4294967295
  dup.3
  movup.5
  exec.mac

  push.4294967295
  dup.4
  movup.6
  exec.mac

  push.4294967295
  dup.5
  movup.7
  exec.mac

  push.4294967295
  dup.6
  movup.8
  exec.mac

  push.4294967295
  dup.7
  movup.9
  exec.mac

  push.4294967295
  movup.8
  movup.9
  exec.mac

  movup.9
  swap
  movup.9
  u32add3.unsafe

  swap
  movup.2
  movup.3
  movup.4
  movup.5
  movup.6
  movup.7
  movup.8
end

# Given two 256 -bit numbers on stack, where each number is represented in
# radix-2^32 form ( i.e. each number having eight 32 -bit limbs ), following function
# computes modular multiplication of those two operands, computing 256 -bit result.
#
# Stack expected as below, holding input
#
# [a0, a1, a2, a3, a4, a5, a6, a7, b0, b1, b2, b3, b4, b5, b6, b7] | a[0..8], b[0..8] are 256 -bit numbers
#
# After finishing execution of this function, stack should look like
#
# [c0, c1, c2, c3, c4, c5, c6, c7] | c[0..8] is a 256 -bit number
#
# Note, for computing modular multiplication of a[0..8] & b[0..8],
# school book multiplication equipped with montgomery reduction technique
# is used, which is why a[0..8], b[0..8] are expected to be in montgomery form,
# while computed c[0..8] will also be in montgomery form.
export.u256_mod_mul.2
  popw.local.0
  popw.local.1

  push.env.locaddr.1
  push.env.locaddr.0
  movup.2
  push.0.0.0.0
  push.0.0.0.0

  exec.u256xu32
  
  push.0
  movdn.9

  exec.u288_reduce

  movup.8
  swap.11
  movdn.8

  exec.u256xu32

  movup.11
  movdn.9

  exec.u288_reduce

  movup.8
  swap.11
  movdn.8

  exec.u256xu32

  movup.11
  movdn.9

  exec.u288_reduce

  movup.8
  swap.11
  movdn.8

  exec.u256xu32

  movup.11
  movdn.9

  exec.u288_reduce

  movup.8
  swap.11
  movdn.8

  exec.u256xu32

  movup.11
  movdn.9

  exec.u288_reduce

  movup.8
  swap.11
  movdn.8

  exec.u256xu32

  movup.11
  movdn.9

  exec.u288_reduce

  movup.8
  swap.11
  movdn.8

  exec.u256xu32

  movup.11
  movdn.9

  exec.u288_reduce

  movup.8
  swap.11
  movdn.8

  exec.u256xu32

  movup.11
  movdn.9

  exec.u288_reduce

  dup.8
  movup.2
  add
  swap

  movup.8
  mul.977
  add

  movup.8
  drop
  movup.8
  drop
end

# Given two 256 -bit numbers on stack, where each number is represented in
# radix-2^32 form ( i.e. each number having eight 32 -bit limbs ), following function
# computes modular addition of those two operands, in secp256k1 prime field.
#
# Stack expected as below, holding input
#
# [a0, a1, a2, a3, a4, a5, a6, a7, b0, b1, b2, b3, b4, b5, b6, b7] | a[0..8], b[0..8] are 256 -bit numbers
#
# After finishing execution of this function, stack should look like
#
# [c0, c1, c2, c3, c4, c5, c6, c7] | c[0..8] is a 256 -bit number
#
# This implementation takes inspiration from https://gist.github.com/itzmeanjan/d4853347dfdfa853993f5ea059824de6#file-test_montgomery_arithmetic-py-L236-L256
export.u256_mod_add
  push.0
  swap
  movup.9
  u32add3.unsafe

  movup.2
  movup.9
  u32add3.unsafe

  movup.3
  movup.9
  u32add3.unsafe

  movup.4
  movup.9
  u32add3.unsafe

  movup.5
  movup.9
  u32add3.unsafe

  movup.6
  movup.9
  u32add3.unsafe

  movup.7
  movup.9
  u32add3.unsafe

  movup.8
  movup.9
  u32add3.unsafe

  movup.8
  dup.1
  push.977
  u32madd.unsafe
  drop

  movup.8
  movup.2
  u32add.unsafe
  drop

  movup.2
  movup.3
  movup.4
  movup.5
  movup.6
  movup.7
  movup.6
  movup.7
end

# Given a secp256k1 field element ( say `a` ) on stack, represented in Montgomery form 
# ( i.e. number having eight 32 -bit limbs ), following function negates it to
# field element `a'` | a' + a = 0
#
# Stack expected as below, holding input
#
# [a0, a1, a2, a3, a4, a5, a6, a7] | a[0..8] is a secp256k1 field element
#
# After finishing execution of this function, stack should look like
#
# [c0, c1, c2, c3, c4, c5, c6, c7] | c[0..8] is a secp256k1 field element
#
# See https://github.com/itzmeanjan/secp256k1/blob/ec3652afe8ed72b29b0e39273a876a898316fb9a/field.py#L77-L95
export.u256_mod_neg
  push.0
  swap
  push.4294966319
  exec.sbb

  movup.2
  push.4294967294
  exec.sbb

  movup.3
  push.4294967295
  exec.sbb

  movup.4
  push.4294967295
  exec.sbb

  movup.5
  push.4294967295
  exec.sbb

  movup.6
  push.4294967295
  exec.sbb

  movup.7
  push.4294967295
  exec.sbb

  movup.8
  push.4294967295
  exec.sbb

  drop
  
  swap
  movup.2
  movup.3
  movup.4
  movup.5
  movup.6
  movup.7
end

# Given two secp256k1 field elements, say a, b, ( represented in Montgomery form, each number having 
# eight 32 -bit limbs ) on stack, following function computes modular subtraction of those 
# two operands c = a + (-b) = a - b
#
# Stack expected as below, holding input
#
# [a0, a1, a2, a3, a4, a5, a6, a7, b0, b1, b2, b3, b4, b5, b6, b7] | a[0..8], b[0..8] are secp256k1 field elements
#
# After finishing execution of this function, stack should look like
#
# [c0, c1, c2, c3, c4, c5, c6, c7] | c[0..8] is a secp256k1 field element
#
# See https://github.com/itzmeanjan/secp256k1/blob/ec3652afe8ed72b29b0e39273a876a898316fb9a/field.py#L97-L101
export.u256_mod_sub.2
  popw.local.0
  popw.local.1

  exec.u256_mod_neg

  pushw.local.1
  pushw.local.0

  exec.u256_mod_add
end

# Given a 256 -bit number on stack, represented in radix-2^32 
# form i.e. eight 32 -bit limbs, this routine computes Montgomery
# representation of provided radix-2^32 number.
#
# - u256 radix-2^32 form input expected on stack as
#
#  [a0, a1, a2, a3, a4, a5, a6, a7]
#
# - u256 montgomery form output on stack
#
# [a0`, a1`, a2`, a3`, a4`, a5`, a6`, a7`]
#
# See section 2.2 of https://eprint.iacr.org/2017/1057.pdf
export.to_mont
  push.0.0.0.0
  push.0.1.1954.954529 # pushed R2's radix-2^32 form;
                       # see https://gist.github.com/itzmeanjan/d4853347dfdfa853993f5ea059824de6

  exec.u256_mod_mul
end

# Given a 256 -bit number on stack, represented in Montgomery 
# form i.e. eight 32 -bit limbs, this routine computes radix-2^32
# representation of provided u256 number.
#
# - u256 montgomery form input on stack expected
#
#  [a0, a1, a2, a3, a4, a5, a6, a7]
#
# - u256 radix-2^32 form output on stack as
#
# [a0`, a1`, a2`, a3`, a4`, a5`, a6`, a7`]
#
# See section 2.2 of https://eprint.iacr.org/2017/1057.pdf
export.from_mont
  push.0.0.0.0
  push.0.0.0.1 # pushed 1's radix-2^32 form;
               # see https://gist.github.com/itzmeanjan/d4853347dfdfa853993f5ea059824de6

  exec.u256_mod_mul
end

# Given a secp256k1 point in projective coordinate system ( i.e. with x, y, z -coordinates
# as secp256k1 prime field elements, represented in Montgomery form ), this routine adds 
# that point with self i.e. does point doubling on elliptic curve, using exception-free 
# doubling formula from algorithm 9 of https://eprint.iacr.org/2015/1060.pdf, while 
# following prototype implementation https://github.com/itzmeanjan/secp256k1/blob/ec3652a/point.py#L131-L165
# 
# Input:
#
# 12 memory addresses on stack such that first 6 memory addresses are for input point &
# last 6 are for storing resulting point.
#
# First 6 addresses hold input elliptic curve point's x, y, z -coordinates, where each coordinate
# is represented in Montgomery form, as eight 32 -bit limbs.
#
# Similarly, last 6 addresses hold resulting (doubled) point's x, y, z -coordinates, where each
# coordinate is represented in Montgomery form, as eight 32 -bit limbs. Note, this is where
# output will be written, so called is expected to read doubled point from last 6 memory addresses.
#
# Expected stack during invokation of this routine:
#
#   [x_addr[0..4], x_addr[4..8], y_addr[0..4], y_addr[4..8], z_addr[0..4], z_addr[4..8], 
#     x3_addr[0..4], x3_addr[4..8], y3_addr[0..4], y3_addr[4..8], z3_addr[0..4], z3_addr[4..8]]
#
# Note, (X, Y, Z)    => input point
#       (X3, Y3, Z3) => output point
#
# Output:
#
# Last 6 memory addresses of 12 memory addresses which were provided during invokation, where resulting doubled
# point is kept in similar form. For seeing X3, Y3, Z3 -coordinates of doubled point, one needs to read from
# those 6 memory addresses.
#
# Stack at end of execution of routine looks like
#
#   [x3_addr[0..4], x3_addr[4..8], y3_addr[0..4], y3_addr[4..8], z3_addr[0..4], z3_addr[4..8]]
export.point_doubling.12
  dup.3
  pushw.mem
  dup.6
  pushw.mem         # y -coordinate on stack top

  dupw.1
  dupw.1            # repeated y -coordinate

  exec.u256_mod_mul # = t0

  storew.local.0
  swapw
  storew.local.1
  swapw             # cache t0

  dupw.1
  dupw.1            # repeated t0

  exec.u256_mod_add # = z3

  dupw.1
  dupw.1            # repeated z3

  exec.u256_mod_add # = z3

  dupw.1
  dupw.1            # repeated z3

  exec.u256_mod_add # = z3

  popw.local.2
  popw.local.3      # cache z3

  dup.5
  pushw.mem
  dup.8
  pushw.mem         # z -coordinate on stack top

  dup.11
  pushw.mem
  dup.14
  pushw.mem         # y -coordinate on stack top

  exec.u256_mod_mul # = t1

  popw.local.4
  popw.local.5      # cache t1

  dup.5
  pushw.mem
  dup.8
  pushw.mem         # z -coordinate on stack top

  dupw.1
  dupw.1            # repeated z

  exec.u256_mod_mul # = t2

  push.0.0.0.0
  push.0.0.21.20517 # = b3

  exec.u256_mod_mul # = t2

  storew.local.6
  swapw
  storew.local.7    # cache t2
  swapw

  pushw.local.3
  pushw.local.2     # = z3

  exec.u256_mod_mul # = x3

  popw.local.8
  popw.local.9      # cache x3

  pushw.local.7
  pushw.local.6     # = t2

  pushw.local.1
  pushw.local.0     # = t0

  exec.u256_mod_add # = y3

  popw.local.10
  popw.local.11     # cache y3

  pushw.local.5
  pushw.local.4     # = t1

  pushw.local.3
  pushw.local.2     # = z3

  exec.u256_mod_mul # = z3

  popw.local.2
  popw.local.3      # cache z3

  pushw.local.7
  pushw.local.6     # = t2

  dupw.1
  dupw.1            # repeated t2

  exec.u256_mod_add # = t1

  pushw.local.7
  pushw.local.6     # = t2

  exec.u256_mod_add # = t2

  pushw.local.1
  pushw.local.0     # = t0

  exec.u256_mod_sub # = t0

  storew.local.0
  swapw
  storew.local.1
  swapw             # cache t0

  pushw.local.11
  pushw.local.10    # = y3

  exec.u256_mod_mul # = y3

  pushw.local.9
  pushw.local.8     # = x3

  exec.u256_mod_add # = y3

  popw.local.10
  popw.local.11     # cache y3

  dup.3
  pushw.mem
  dup.6
  pushw.mem         # y -coordinate on stack top

  dup.9
  pushw.mem
  dup.12
  pushw.mem         # x -coordinate on stack top

  exec.u256_mod_mul # = t1

  pushw.local.1
  pushw.local.0     # = t0

  exec.u256_mod_mul # = x3

  dupw.1
  dupw.1            # repeated x3

  exec.u256_mod_add # = x3

  popw.local.8
  popw.local.9      # cache x3

  dropw
  drop
  drop

  dup
  pushw.local.8
  movup.4
  popw.mem          # write x3[0..4] to memory

  dup.1
  pushw.local.9
  movup.4
  popw.mem          # write x3[4..8] to memory

  dup.2
  pushw.local.10
  movup.4
  popw.mem          # write y3[0..4] to memory

  dup.3
  pushw.local.11
  movup.4
  popw.mem          # write y3[4..8] to memory

  dup.4
  pushw.local.2
  movup.4
  popw.mem          # write z3[0..4] to memory

  dup.5
  pushw.local.3
  movup.4
  popw.mem          # write z3[4..8] to memory
end

# Given two secp256k1 points in projective coordinate system ( i.e. with x, y, z -coordinates
# as secp256k1 prime field elements, represented in Montgomery form, each coordinate using eight 32 -bit limbs ),
# this routine adds those two points on elliptic curve, using exception-free addition formula from
# algorithm 7 of https://eprint.iacr.org/2015/1060.pdf, while following prototype
# implementation https://github.com/itzmeanjan/secp256k1/blob/ec3652a/point.py#L60-L115
# 
# Input:
#
# 18 memory addresses on stack such that first 6 memory addresses are for first input point, next 6
# memory addresses holding x, y, z -coordinates of second input point & last 6 addresses are for storing 
# resulting point ( addition of two input points ).
#
# Expected stack during invokation of this routine:
#
#   [x1_addr[0..4], x1_addr[4..8], y1_addr[0..4], y1_addr[4..8], z1_addr[0..4], z1_addr[4..8], 
#     x2_addr[0..4], x2_addr[4..8], y2_addr[0..4], y2_addr[4..8], z2_addr[0..4], z2_addr[4..8],
#       x3_addr[0..4], x3_addr[4..8], y3_addr[0..4], y3_addr[4..8], z3_addr[0..4], z3_addr[4..8]]
#
# Note, (X1, Y1, Z1)    => input point 1
#       (X2, Y2, Z2)    => input point 2
#       (X3, Y3, Z3)    => output point
#
# Output:
#
# Last 6 memory addresses of 18 input memory addresses which were provided during invokation, where resulting elliptic curve
# point is kept in similar form. For seeing X3, Y3, Z3 -coordinates of doubled point, one needs to read from
# those 6 memory addresses.
#
# Stack at end of execution of routine looks like
#
#   [x3_addr[0..4], x3_addr[4..8], y3_addr[0..4], y3_addr[4..8], z3_addr[0..4], z3_addr[4..8]]
export.point_addition.16
  dup.6
  dup.8

  pushw.mem
  movup.4
  pushw.mem # x2 on stack top

  dup.8
  dup.10

  pushw.mem
  movup.4
  pushw.mem # x1 on stack top

  exec.u256_mod_mul # = t0

  popw.local.0
  popw.local.1 # cache t0

  dup.8
  dup.10

  pushw.mem
  movup.4
  pushw.mem # y2 on stack top

  dup.10
  dup.12

  pushw.mem
  movup.4
  pushw.mem # y1 on stack top

  exec.u256_mod_mul # = t1

  popw.local.2
  popw.local.3 # cache t1

  dup.10
  dup.12

  pushw.mem
  movup.4
  pushw.mem # z2 on stack top

  dup.12
  dup.14

  pushw.mem
  movup.4
  pushw.mem # z1 on stack top

  exec.u256_mod_mul # = t2

  popw.local.4
  popw.local.5 # cache t2

  dup.2
  dup.4

  pushw.mem
  movup.4
  pushw.mem # y1 on stack top

  dup.8
  dup.10

  pushw.mem
  movup.4
  pushw.mem # x1 on stack top

  exec.u256_mod_add # = t3

  popw.local.6
  popw.local.7 # cache t3

  dup.8
  dup.10

  pushw.mem
  movup.4
  pushw.mem # y2 on stack top

  dup.15
  dup.15
  swap

  pushw.mem
  movup.4
  pushw.mem # x2 on stack top
  
  exec.u256_mod_add # = t4

  pushw.local.7
  pushw.local.6 # t3 loaded back

  exec.u256_mod_mul # = t3

  popw.local.6
  popw.local.7 # cache t3

  pushw.local.3
  pushw.local.2 # t1 loaded back

  pushw.local.1
  pushw.local.0 # t0 loaded back

  exec.u256_mod_add # = t4

  pushw.local.7
  pushw.local.6 # t3 loaded back

  exec.u256_mod_sub # = t3

  popw.local.6
  popw.local.7 # cache t3

  dup.2
  dup.4

  pushw.mem
  movup.4
  pushw.mem # y1 on stack top

  dup.12
  dup.14

  pushw.mem
  movup.4
  pushw.mem # z1 on stack top

  exec.u256_mod_add # = t4

  popw.local.8
  popw.local.9 # cache t4

  dup.11
  dup.11

  dup.10
  dup.12

  pushw.mem
  movup.4
  pushw.mem # y2 on stack top

  movup.8
  movup.9

  pushw.mem
  movup.4
  pushw.mem # z2 on stack top

  exec.u256_mod_add # = x3

  pushw.local.9
  pushw.local.8 # t4 loaded back

  exec.u256_mod_mul # = t4

  popw.local.8
  popw.local.9 # cache t4

  pushw.local.5
  pushw.local.4 # t2 loaded back

  pushw.local.3
  pushw.local.2 # t1 loaded back

  exec.u256_mod_add # = x3

  pushw.local.9
  pushw.local.8 # t4 loaded back

  exec.u256_mod_sub # = t4

  popw.local.8
  popw.local.9 # cache t4

  dup.4
  dup.6

  pushw.mem
  movup.4
  pushw.mem # z1 on stack top

  dup.8
  dup.10

  pushw.mem
  movup.4
  pushw.mem # x1 on stack top

  exec.u256_mod_add # = x3

  popw.local.10
  popw.local.11 # cache x3

  dup.10
  dup.12

  pushw.mem
  movup.4
  pushw.mem # z2 on stack top

  dup.15
  dup.15
  swap

  pushw.mem
  movup.4
  pushw.mem # x2 on stack top

  exec.u256_mod_add # = y3

  pushw.local.11
  pushw.local.10 # x3 loaded back

  exec.u256_mod_mul # = x3

  popw.local.10
  popw.local.11 # cache x3

  pushw.local.5
  pushw.local.4 # t2 loaded back

  pushw.local.1
  pushw.local.0 # t0 loaded back

  exec.u256_mod_add # = y3

  pushw.local.11
  pushw.local.10 # x3 loaded back

  exec.u256_mod_sub # = y3

  popw.local.12
  popw.local.13 # cache y3

  pushw.local.1
  pushw.local.0 # t0 loaded back

  dupw.1
  dupw.1

  exec.u256_mod_add # = x3

  storew.local.10
  swapw
  storew.local.11
  swapw # cache x3

  pushw.local.1
  pushw.local.0 # t0 loaded back

  exec.u256_mod_add # = t0

  popw.local.0
  popw.local.1 # cache t0

  push.0.0.0.0
  push.0.0.21.20517 # b3 on stack top

  pushw.local.5
  pushw.local.4 # t2 loaded back

  exec.u256_mod_mul # = t2

  storew.local.4
  swapw
  storew.local.5
  swapw # cache t2

  pushw.local.3
  pushw.local.2 # t1 loaded back

  exec.u256_mod_add # = z3

  popw.local.14
  popw.local.15 # cache z3

  pushw.local.5
  pushw.local.4 # t2 loaded back

  pushw.local.3
  pushw.local.2 # t1 loaded back

  exec.u256_mod_sub # = t1

  popw.local.2
  popw.local.3 # cache t1

  push.0.0.0.0
  push.0.0.21.20517 # b3 on stack top

  pushw.local.13
  pushw.local.12 # y3 loaded back

  exec.u256_mod_mul # = y3

  storew.local.12
  swapw
  storew.local.13
  swapw # cache y3

  pushw.local.9
  pushw.local.8 # t4 loaded back

  exec.u256_mod_mul # = x3

  popw.local.10
  popw.local.11 # cache x3

  pushw.local.3
  pushw.local.2 # t1 loaded back

  pushw.local.7
  pushw.local.6 # t3 loaded back

  exec.u256_mod_mul # = t2

  pushw.local.11
  pushw.local.10 # x3 loaded back

  exec.u256_mod_neg
  exec.u256_mod_add # = x3

  popw.local.10
  popw.local.11 # cache x3

  pushw.local.1
  pushw.local.0 # t0 loaded back

  pushw.local.13
  pushw.local.12 # y3 loaded back

  exec.u256_mod_mul # = y3

  popw.local.12
  popw.local.13 # cache y3

  pushw.local.15
  pushw.local.14 # z3 loaded back

  pushw.local.3
  pushw.local.2 # t1 loaded back

  exec.u256_mod_mul # = t1

  pushw.local.13
  pushw.local.12 # y3 loaded back

  exec.u256_mod_add # = y3

  popw.local.12
  popw.local.13 # cache y3

  pushw.local.7
  pushw.local.6 # t3 loaded back

  pushw.local.1
  pushw.local.0 # t0 loaded back

  exec.u256_mod_mul # = t0

  popw.local.0
  popw.local.1 # cache t0

  pushw.local.9
  pushw.local.8 # t4 loaded back

  pushw.local.15
  pushw.local.14 # z3 loaded back

  exec.u256_mod_mul # = z3

  pushw.local.1
  pushw.local.0 # t0 loaded back

  exec.u256_mod_add # = z3

  popw.local.14
  popw.local.15 # cache z3

  dropw
  dropw
  dropw

  dup
  pushw.local.10
  movup.4
  popw.mem          # write x3[0..4] to memory

  dup.1
  pushw.local.11
  movup.4
  popw.mem          # write x3[4..8] to memory

  dup.2
  pushw.local.12
  movup.4
  popw.mem          # write y3[0..4] to memory

  dup.3
  pushw.local.13
  movup.4
  popw.mem          # write y3[4..8] to memory

  dup.4
  pushw.local.14
  movup.4
  popw.mem          # write z3[0..4] to memory

  dup.5
  pushw.local.15
  movup.4
  popw.mem          # write z3[4..8] to memory
end
