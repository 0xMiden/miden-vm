const.LEAF_DEPTH=64

#! Input:  [V, K, R, ...]
#! Output: [V_old, R_new, ...]
export.set
    movdnw.2 adv.push_smtpeek movupw.2
    # => [V, K, R]

    # Push peeked value on stack
    adv_push.4
    # => [V_old, V, K, R]

    padw eqw
    # => [V_old == ZERO, ZERO, V_old, V, K, R]

    if.true
        # empty leaf

        dropw dropw
        #=> [V, K, R]

        # Update advice map with new leaf preimage
        # adv_map[hash(K, V)] = [K, V]
        adv.insert_hdword
        #=> [V, K, R]

        # Compute hash([K, V]); the new node value (NV)
        dupw.1 swapw hmerge
        # => [NV, K, R]

        # Prepare stack for `mtree_set`
        movupw.2 dup.8 push.LEAF_DEPTH
        #=> [depth, K[0], R, NV, K]

        # Insert node in Merkle store
        mtree_set
        #=> [V_in_leaf, R_new, K]

        # Check that V_in_leaf is indeed empty
        padw assert_eqw
        #=> [R_new, K]

        # Prepare stack for return
        swapw dropw padw
        #=> [ZERO, R_new]
    else
        # Single or Multiple leaf

        dropw
        # => [V_old, V, K, R]

        # Prepare stack to retrieve leaf pre-image
        dupw.2 dupw.1 hmerge
        # => [NV, V_old, V, K, R]

        # Retrieve leaf pre-image on advice stack, and push leaf size on stack
        adv.push_mapvaln dropw adv_push.1
        # => [leaf_size, V_old, V, K, R]

        # Leaf size will be a multiple of 8 (each kv-pair in a leaf is 8 elements)
        dup eq.8
        # => [is_single_kv_pair, leaf_size, V_old, V, K, R]

        if.true
            #  Single kv-pair case

            # Note: We don't need to push the `V_old_in_leaf` value.
            # It is sufficient to deal with `V_old` from `adv.push_smtpeek`, and check its authenticity
            # at the end after inserting with `mtree_set`
            drop adv_push.4
            # => [K_in_leaf, V_old, V, K, R]

            # Check if the key stored in the leaf is the same
            dupw.3 eqw
            # => [K_in_leaf==K, K, K_in_leaf, V_old, V, K, R]

            if.true
                # Leaf stays a "single" variant

                dropw dropw
                # => [V_old, V, K, R]

                # Update advice map
                movdnw.3 adv.insert_hdword
                # => [V, K, R, V_old]

                # Compute hash([K, V]); the new node value (NV)
                dupw.1 swapw hmerge
                # => [NV, K, R, V_old]

                # Prepare stack to update Merkle store
                movupw.2 dup.8 push.LEAF_DEPTH
                # => [depth, K[0], R, NV, K, V_old]

                # Update Merkle store
                mtree_set
                # => [NV_old, R_new, K, V_old_from_peek]

                # Confirm that claimed `V_old` from `adv.push_smtpeek` is correct by checking if 
                # `[K, V_old]` hashes to `NV_old`
                movupw.2 dupw.3 hmerge assert_eqw
                # => [R_new, V_old_from_peek]

                # Clean up stack for return
                swapw
                # => [V_old, R_new]
            else
                # Leaf becomes a Multiple kv-pair case
                # TODO (fail for now)
                push.1 assertz
            end

        else
            # Multiple kv-pair case
            # TODO (fail for now)
            push.1 assertz
        end
    end
end

#! Input:  [K, R, ...]
#! Output: [V, R, ...]
export.get
    # Prepare for `mtree_get`
    dupw.1 dup.4 push.LEAF_DEPTH
    # => [depth, K[0], R, K, R]

    # Retrieve node value from merkle store
    mtree_get swapw dropw
    # => [NV, K, R]

    # Check if value is empty; if so, return empty value
    padw eqw
    # => [NV == 0, ZERO, V, K, R]

    if.true
        # Return empty value
        dropw swapw dropw
        # => [NV, R]
    else
        # Drop extra ZERO word
        dropw
        # => [NV, K, R]

        # Get leaf pre-image from advice map. Push the leaf preimage size on the stack
        adv.push_mapvaln adv_push.1
        # => [leaf_size, NV, K, R]

        # Leaf size will be a multiple of 8 (each kv-pair in a leaf is 8 elements)
        dup eq.8
        # => [is_single_kv_pair, leaf_size, NV, K, R]

        if.true
            # Single kv-pair case

            # Push leaf pre-image on stack (single K-V pair)
            drop adv_push.8
            # => [V, K, NV, K, R]

            # Confirm that the key stored in the leaf is as expected
            movupw.3 dupw.2 assert_eqw
            # => [V, K, NV, R]

            # Duplicate V to return it after hash check
            dupw movdnw.3
            # => [V, K, NV, V, R]

            # Hash leaf preimage and ensure that it equals node value
            hmerge assert_eqw
            # => [V, R]
        else
            # Multiple kv-pair case
            # TODO (fail for now)
            push.1 assertz
        end
    end
end
